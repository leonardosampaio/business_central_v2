<?php
/**
 * CustomerPaymentJournal
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerPaymentJournal Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CustomerPaymentJournal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'customerPaymentJournal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'code' => 'string',
        'display_name' => 'string',
        'last_modified_date_time' => '\DateTime',
        'balancing_account_id' => 'string',
        'balancing_account_number' => 'string',
        'customer_payments' => '\OpenAPI\Client\Model\CustomerPayment[]',
        'account' => '\OpenAPI\Client\Model\Account'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'code' => null,
        'display_name' => null,
        'last_modified_date_time' => 'date-time',
        'balancing_account_id' => 'uuid',
        'balancing_account_number' => null,
        'customer_payments' => null,
        'account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'display_name' => 'displayName',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'balancing_account_id' => 'balancingAccountId',
        'balancing_account_number' => 'balancingAccountNumber',
        'customer_payments' => 'customerPayments',
        'account' => 'account'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'display_name' => 'setDisplayName',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'balancing_account_id' => 'setBalancingAccountId',
        'balancing_account_number' => 'setBalancingAccountNumber',
        'customer_payments' => 'setCustomerPayments',
        'account' => 'setAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'display_name' => 'getDisplayName',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'balancing_account_id' => 'getBalancingAccountId',
        'balancing_account_number' => 'getBalancingAccountNumber',
        'customer_payments' => 'getCustomerPayments',
        'account' => 'getAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['last_modified_date_time'] = $data['last_modified_date_time'] ?? null;
        $this->container['balancing_account_id'] = $data['balancing_account_id'] ?? null;
        $this->container['balancing_account_number'] = $data['balancing_account_number'] ?? null;
        $this->container['customer_payments'] = $data['customer_payments'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 10)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['balancing_account_number']) && (mb_strlen($this->container['balancing_account_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'balancing_account_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (v1.0) The id property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code (v1.0) The code property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CustomerPaymentJournal., must be smaller than or equal to 10.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name (v1.0) The displayName property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling CustomerPaymentJournal., must be smaller than or equal to 100.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime|null $last_modified_date_time (v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets balancing_account_id
     *
     * @return string|null
     */
    public function getBalancingAccountId()
    {
        return $this->container['balancing_account_id'];
    }

    /**
     * Sets balancing_account_id
     *
     * @param string|null $balancing_account_id (v1.0) The balancingAccountId property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setBalancingAccountId($balancing_account_id)
    {
        $this->container['balancing_account_id'] = $balancing_account_id;

        return $this;
    }

    /**
     * Gets balancing_account_number
     *
     * @return string|null
     */
    public function getBalancingAccountNumber()
    {
        return $this->container['balancing_account_number'];
    }

    /**
     * Sets balancing_account_number
     *
     * @param string|null $balancing_account_number (v1.0) The balancingAccountNumber property for the Dynamics 365 Business Central customerPaymentJournal entity
     *
     * @return self
     */
    public function setBalancingAccountNumber($balancing_account_number)
    {
        if (!is_null($balancing_account_number) && (mb_strlen($balancing_account_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $balancing_account_number when calling CustomerPaymentJournal., must be smaller than or equal to 20.');
        }

        $this->container['balancing_account_number'] = $balancing_account_number;

        return $this;
    }

    /**
     * Gets customer_payments
     *
     * @return \OpenAPI\Client\Model\CustomerPayment[]|null
     */
    public function getCustomerPayments()
    {
        return $this->container['customer_payments'];
    }

    /**
     * Sets customer_payments
     *
     * @param \OpenAPI\Client\Model\CustomerPayment[]|null $customer_payments customer_payments
     *
     * @return self
     */
    public function setCustomerPayments($customer_payments)
    {
        $this->container['customer_payments'] = $customer_payments;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\Account|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\Account|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


