<?php
/**
 * TrialBalance
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrialBalance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TrialBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'trialBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'account_id' => 'string',
        'account_type' => 'string',
        'display' => 'string',
        'total_debit' => 'string',
        'total_credit' => 'string',
        'balance_at_date_debit' => 'string',
        'balance_at_date_credit' => 'string',
        'date_filter' => '\DateTime',
        'account' => '\OpenAPI\Client\Model\Account'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'account_id' => 'uuid',
        'account_type' => null,
        'display' => null,
        'total_debit' => null,
        'total_credit' => null,
        'balance_at_date_debit' => null,
        'balance_at_date_credit' => null,
        'date_filter' => 'date-time',
        'account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'account_id' => 'accountId',
        'account_type' => 'accountType',
        'display' => 'display',
        'total_debit' => 'totalDebit',
        'total_credit' => 'totalCredit',
        'balance_at_date_debit' => 'balanceAtDateDebit',
        'balance_at_date_credit' => 'balanceAtDateCredit',
        'date_filter' => 'dateFilter',
        'account' => 'account'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'account_id' => 'setAccountId',
        'account_type' => 'setAccountType',
        'display' => 'setDisplay',
        'total_debit' => 'setTotalDebit',
        'total_credit' => 'setTotalCredit',
        'balance_at_date_debit' => 'setBalanceAtDateDebit',
        'balance_at_date_credit' => 'setBalanceAtDateCredit',
        'date_filter' => 'setDateFilter',
        'account' => 'setAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'account_id' => 'getAccountId',
        'account_type' => 'getAccountType',
        'display' => 'getDisplay',
        'total_debit' => 'getTotalDebit',
        'total_credit' => 'getTotalCredit',
        'balance_at_date_debit' => 'getBalanceAtDateDebit',
        'balance_at_date_credit' => 'getBalanceAtDateCredit',
        'date_filter' => 'getDateFilter',
        'account' => 'getAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = $data['number'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['display'] = $data['display'] ?? null;
        $this->container['total_debit'] = $data['total_debit'] ?? null;
        $this->container['total_credit'] = $data['total_credit'] ?? null;
        $this->container['balance_at_date_debit'] = $data['balance_at_date_debit'] ?? null;
        $this->container['balance_at_date_credit'] = $data['balance_at_date_credit'] ?? null;
        $this->container['date_filter'] = $data['date_filter'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['display']) && (mb_strlen($this->container['display']) > 100)) {
            $invalidProperties[] = "invalid value for 'display', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['total_debit']) && (mb_strlen($this->container['total_debit']) > 30)) {
            $invalidProperties[] = "invalid value for 'total_debit', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['total_credit']) && (mb_strlen($this->container['total_credit']) > 30)) {
            $invalidProperties[] = "invalid value for 'total_credit', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['balance_at_date_debit']) && (mb_strlen($this->container['balance_at_date_debit']) > 30)) {
            $invalidProperties[] = "invalid value for 'balance_at_date_debit', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['balance_at_date_credit']) && (mb_strlen($this->container['balance_at_date_credit']) > 30)) {
            $invalidProperties[] = "invalid value for 'balance_at_date_credit', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number (v1.0) The number property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling TrialBalance., must be smaller than or equal to 20.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id (v1.0) The accountId property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type (v1.0) The accountType property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display (v1.0) The display property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (!is_null($display) && (mb_strlen($display) > 100)) {
            throw new \InvalidArgumentException('invalid length for $display when calling TrialBalance., must be smaller than or equal to 100.');
        }

        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets total_debit
     *
     * @return string|null
     */
    public function getTotalDebit()
    {
        return $this->container['total_debit'];
    }

    /**
     * Sets total_debit
     *
     * @param string|null $total_debit (v1.0) The totalDebit property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setTotalDebit($total_debit)
    {
        if (!is_null($total_debit) && (mb_strlen($total_debit) > 30)) {
            throw new \InvalidArgumentException('invalid length for $total_debit when calling TrialBalance., must be smaller than or equal to 30.');
        }

        $this->container['total_debit'] = $total_debit;

        return $this;
    }

    /**
     * Gets total_credit
     *
     * @return string|null
     */
    public function getTotalCredit()
    {
        return $this->container['total_credit'];
    }

    /**
     * Sets total_credit
     *
     * @param string|null $total_credit (v1.0) The totalCredit property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setTotalCredit($total_credit)
    {
        if (!is_null($total_credit) && (mb_strlen($total_credit) > 30)) {
            throw new \InvalidArgumentException('invalid length for $total_credit when calling TrialBalance., must be smaller than or equal to 30.');
        }

        $this->container['total_credit'] = $total_credit;

        return $this;
    }

    /**
     * Gets balance_at_date_debit
     *
     * @return string|null
     */
    public function getBalanceAtDateDebit()
    {
        return $this->container['balance_at_date_debit'];
    }

    /**
     * Sets balance_at_date_debit
     *
     * @param string|null $balance_at_date_debit (v1.0) The balanceAtDateDebit property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setBalanceAtDateDebit($balance_at_date_debit)
    {
        if (!is_null($balance_at_date_debit) && (mb_strlen($balance_at_date_debit) > 30)) {
            throw new \InvalidArgumentException('invalid length for $balance_at_date_debit when calling TrialBalance., must be smaller than or equal to 30.');
        }

        $this->container['balance_at_date_debit'] = $balance_at_date_debit;

        return $this;
    }

    /**
     * Gets balance_at_date_credit
     *
     * @return string|null
     */
    public function getBalanceAtDateCredit()
    {
        return $this->container['balance_at_date_credit'];
    }

    /**
     * Sets balance_at_date_credit
     *
     * @param string|null $balance_at_date_credit (v1.0) The balanceAtDateCredit property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setBalanceAtDateCredit($balance_at_date_credit)
    {
        if (!is_null($balance_at_date_credit) && (mb_strlen($balance_at_date_credit) > 30)) {
            throw new \InvalidArgumentException('invalid length for $balance_at_date_credit when calling TrialBalance., must be smaller than or equal to 30.');
        }

        $this->container['balance_at_date_credit'] = $balance_at_date_credit;

        return $this;
    }

    /**
     * Gets date_filter
     *
     * @return \DateTime|null
     */
    public function getDateFilter()
    {
        return $this->container['date_filter'];
    }

    /**
     * Sets date_filter
     *
     * @param \DateTime|null $date_filter (v1.0) The dateFilter property for the Dynamics 365 Business Central trialBalance entity
     *
     * @return self
     */
    public function setDateFilter($date_filter)
    {
        $this->container['date_filter'] = $date_filter;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\Account|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\Account|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


