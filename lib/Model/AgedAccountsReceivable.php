<?php
/**
 * AgedAccountsReceivable
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AgedAccountsReceivable Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AgedAccountsReceivable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'agedAccountsReceivable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'string',
        'customer_number' => 'string',
        'name' => 'string',
        'currency_code' => 'string',
        'balance_due' => 'float',
        'current_amount' => 'float',
        'period1_amount' => 'float',
        'period2_amount' => 'float',
        'period3_amount' => 'float',
        'aged_as_of_date' => '\DateTime',
        'period_length_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => 'uuid',
        'customer_number' => null,
        'name' => null,
        'currency_code' => null,
        'balance_due' => 'decimal',
        'current_amount' => 'decimal',
        'period1_amount' => 'decimal',
        'period2_amount' => 'decimal',
        'period3_amount' => 'decimal',
        'aged_as_of_date' => 'date-time',
        'period_length_filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customerId',
        'customer_number' => 'customerNumber',
        'name' => 'name',
        'currency_code' => 'currencyCode',
        'balance_due' => 'balanceDue',
        'current_amount' => 'currentAmount',
        'period1_amount' => 'period1Amount',
        'period2_amount' => 'period2Amount',
        'period3_amount' => 'period3Amount',
        'aged_as_of_date' => 'agedAsOfDate',
        'period_length_filter' => 'periodLengthFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'customer_number' => 'setCustomerNumber',
        'name' => 'setName',
        'currency_code' => 'setCurrencyCode',
        'balance_due' => 'setBalanceDue',
        'current_amount' => 'setCurrentAmount',
        'period1_amount' => 'setPeriod1Amount',
        'period2_amount' => 'setPeriod2Amount',
        'period3_amount' => 'setPeriod3Amount',
        'aged_as_of_date' => 'setAgedAsOfDate',
        'period_length_filter' => 'setPeriodLengthFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'customer_number' => 'getCustomerNumber',
        'name' => 'getName',
        'currency_code' => 'getCurrencyCode',
        'balance_due' => 'getBalanceDue',
        'current_amount' => 'getCurrentAmount',
        'period1_amount' => 'getPeriod1Amount',
        'period2_amount' => 'getPeriod2Amount',
        'period3_amount' => 'getPeriod3Amount',
        'aged_as_of_date' => 'getAgedAsOfDate',
        'period_length_filter' => 'getPeriodLengthFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_number'] = $data['customer_number'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['balance_due'] = $data['balance_due'] ?? null;
        $this->container['current_amount'] = $data['current_amount'] ?? null;
        $this->container['period1_amount'] = $data['period1_amount'] ?? null;
        $this->container['period2_amount'] = $data['period2_amount'] ?? null;
        $this->container['period3_amount'] = $data['period3_amount'] ?? null;
        $this->container['aged_as_of_date'] = $data['aged_as_of_date'] ?? null;
        $this->container['period_length_filter'] = $data['period_length_filter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer_number']) && (mb_strlen($this->container['customer_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['period_length_filter']) && (mb_strlen($this->container['period_length_filter']) > 10)) {
            $invalidProperties[] = "invalid value for 'period_length_filter', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id (v1.0) The customerId property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string|null $customer_number (v1.0) The customerNumber property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (!is_null($customer_number) && (mb_strlen($customer_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling AgedAccountsReceivable., must be smaller than or equal to 20.');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name (v1.0) The name property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AgedAccountsReceivable., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code (v1.0) The currencyCode property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling AgedAccountsReceivable., must be smaller than or equal to 10.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets balance_due
     *
     * @return float|null
     */
    public function getBalanceDue()
    {
        return $this->container['balance_due'];
    }

    /**
     * Sets balance_due
     *
     * @param float|null $balance_due (v1.0) The balanceDue property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setBalanceDue($balance_due)
    {
        $this->container['balance_due'] = $balance_due;

        return $this;
    }

    /**
     * Gets current_amount
     *
     * @return float|null
     */
    public function getCurrentAmount()
    {
        return $this->container['current_amount'];
    }

    /**
     * Sets current_amount
     *
     * @param float|null $current_amount (v1.0) The currentAmount property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setCurrentAmount($current_amount)
    {
        $this->container['current_amount'] = $current_amount;

        return $this;
    }

    /**
     * Gets period1_amount
     *
     * @return float|null
     */
    public function getPeriod1Amount()
    {
        return $this->container['period1_amount'];
    }

    /**
     * Sets period1_amount
     *
     * @param float|null $period1_amount (v1.0) The period1Amount property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setPeriod1Amount($period1_amount)
    {
        $this->container['period1_amount'] = $period1_amount;

        return $this;
    }

    /**
     * Gets period2_amount
     *
     * @return float|null
     */
    public function getPeriod2Amount()
    {
        return $this->container['period2_amount'];
    }

    /**
     * Sets period2_amount
     *
     * @param float|null $period2_amount (v1.0) The period2Amount property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setPeriod2Amount($period2_amount)
    {
        $this->container['period2_amount'] = $period2_amount;

        return $this;
    }

    /**
     * Gets period3_amount
     *
     * @return float|null
     */
    public function getPeriod3Amount()
    {
        return $this->container['period3_amount'];
    }

    /**
     * Sets period3_amount
     *
     * @param float|null $period3_amount (v1.0) The period3Amount property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setPeriod3Amount($period3_amount)
    {
        $this->container['period3_amount'] = $period3_amount;

        return $this;
    }

    /**
     * Gets aged_as_of_date
     *
     * @return \DateTime|null
     */
    public function getAgedAsOfDate()
    {
        return $this->container['aged_as_of_date'];
    }

    /**
     * Sets aged_as_of_date
     *
     * @param \DateTime|null $aged_as_of_date (v1.0) The agedAsOfDate property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setAgedAsOfDate($aged_as_of_date)
    {
        $this->container['aged_as_of_date'] = $aged_as_of_date;

        return $this;
    }

    /**
     * Gets period_length_filter
     *
     * @return string|null
     */
    public function getPeriodLengthFilter()
    {
        return $this->container['period_length_filter'];
    }

    /**
     * Sets period_length_filter
     *
     * @param string|null $period_length_filter (v1.0) The periodLengthFilter property for the Dynamics 365 Business Central agedAccountsReceivable entity
     *
     * @return self
     */
    public function setPeriodLengthFilter($period_length_filter)
    {
        if (!is_null($period_length_filter) && (mb_strlen($period_length_filter) > 10)) {
            throw new \InvalidArgumentException('invalid length for $period_length_filter when calling AgedAccountsReceivable., must be smaller than or equal to 10.');
        }

        $this->container['period_length_filter'] = $period_length_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


