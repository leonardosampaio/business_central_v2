<?php
/**
 * Customer
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'display_name' => 'string',
        'type' => 'string',
        'address' => '\OpenAPI\Client\Model\Postaladdresstype',
        'phone_number' => 'string',
        'email' => 'string',
        'website' => 'string',
        'tax_liable' => 'bool',
        'tax_area_id' => 'string',
        'tax_area_display_name' => 'string',
        'tax_registration_number' => 'string',
        'currency_id' => 'string',
        'currency_code' => 'string',
        'payment_terms_id' => 'string',
        'shipment_method_id' => 'string',
        'payment_method_id' => 'string',
        'blocked' => 'string',
        'last_modified_date_time' => '\DateTime',
        'customer_financial_details' => '\OpenAPI\Client\Model\CustomerFinancialDetail[]',
        'picture' => '\OpenAPI\Client\Model\Picture[]',
        'default_dimensions' => '\OpenAPI\Client\Model\DefaultDimensions[]',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'payment_term' => '\OpenAPI\Client\Model\PaymentTerm',
        'shipment_method' => '\OpenAPI\Client\Model\ShipmentMethod',
        'payment_method' => '\OpenAPI\Client\Model\PaymentMethod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'display_name' => null,
        'type' => null,
        'address' => null,
        'phone_number' => null,
        'email' => null,
        'website' => null,
        'tax_liable' => null,
        'tax_area_id' => 'uuid',
        'tax_area_display_name' => null,
        'tax_registration_number' => null,
        'currency_id' => 'uuid',
        'currency_code' => null,
        'payment_terms_id' => 'uuid',
        'shipment_method_id' => 'uuid',
        'payment_method_id' => 'uuid',
        'blocked' => null,
        'last_modified_date_time' => 'date-time',
        'customer_financial_details' => null,
        'picture' => null,
        'default_dimensions' => null,
        'currency' => null,
        'payment_term' => null,
        'shipment_method' => null,
        'payment_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'display_name' => 'displayName',
        'type' => 'type',
        'address' => 'address',
        'phone_number' => 'phoneNumber',
        'email' => 'email',
        'website' => 'website',
        'tax_liable' => 'taxLiable',
        'tax_area_id' => 'taxAreaId',
        'tax_area_display_name' => 'taxAreaDisplayName',
        'tax_registration_number' => 'taxRegistrationNumber',
        'currency_id' => 'currencyId',
        'currency_code' => 'currencyCode',
        'payment_terms_id' => 'paymentTermsId',
        'shipment_method_id' => 'shipmentMethodId',
        'payment_method_id' => 'paymentMethodId',
        'blocked' => 'blocked',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'customer_financial_details' => 'customerFinancialDetails',
        'picture' => 'picture',
        'default_dimensions' => 'defaultDimensions',
        'currency' => 'currency',
        'payment_term' => 'paymentTerm',
        'shipment_method' => 'shipmentMethod',
        'payment_method' => 'paymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'display_name' => 'setDisplayName',
        'type' => 'setType',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'website' => 'setWebsite',
        'tax_liable' => 'setTaxLiable',
        'tax_area_id' => 'setTaxAreaId',
        'tax_area_display_name' => 'setTaxAreaDisplayName',
        'tax_registration_number' => 'setTaxRegistrationNumber',
        'currency_id' => 'setCurrencyId',
        'currency_code' => 'setCurrencyCode',
        'payment_terms_id' => 'setPaymentTermsId',
        'shipment_method_id' => 'setShipmentMethodId',
        'payment_method_id' => 'setPaymentMethodId',
        'blocked' => 'setBlocked',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'customer_financial_details' => 'setCustomerFinancialDetails',
        'picture' => 'setPicture',
        'default_dimensions' => 'setDefaultDimensions',
        'currency' => 'setCurrency',
        'payment_term' => 'setPaymentTerm',
        'shipment_method' => 'setShipmentMethod',
        'payment_method' => 'setPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'display_name' => 'getDisplayName',
        'type' => 'getType',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'website' => 'getWebsite',
        'tax_liable' => 'getTaxLiable',
        'tax_area_id' => 'getTaxAreaId',
        'tax_area_display_name' => 'getTaxAreaDisplayName',
        'tax_registration_number' => 'getTaxRegistrationNumber',
        'currency_id' => 'getCurrencyId',
        'currency_code' => 'getCurrencyCode',
        'payment_terms_id' => 'getPaymentTermsId',
        'shipment_method_id' => 'getShipmentMethodId',
        'payment_method_id' => 'getPaymentMethodId',
        'blocked' => 'getBlocked',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'customer_financial_details' => 'getCustomerFinancialDetails',
        'picture' => 'getPicture',
        'default_dimensions' => 'getDefaultDimensions',
        'currency' => 'getCurrency',
        'payment_term' => 'getPaymentTerm',
        'shipment_method' => 'getShipmentMethod',
        'payment_method' => 'getPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['tax_liable'] = $data['tax_liable'] ?? null;
        $this->container['tax_area_id'] = $data['tax_area_id'] ?? null;
        $this->container['tax_area_display_name'] = $data['tax_area_display_name'] ?? null;
        $this->container['tax_registration_number'] = $data['tax_registration_number'] ?? null;
        $this->container['currency_id'] = $data['currency_id'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['payment_terms_id'] = $data['payment_terms_id'] ?? null;
        $this->container['shipment_method_id'] = $data['shipment_method_id'] ?? null;
        $this->container['payment_method_id'] = $data['payment_method_id'] ?? null;
        $this->container['blocked'] = $data['blocked'] ?? null;
        $this->container['last_modified_date_time'] = $data['last_modified_date_time'] ?? null;
        $this->container['customer_financial_details'] = $data['customer_financial_details'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['default_dimensions'] = $data['default_dimensions'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['payment_term'] = $data['payment_term'] ?? null;
        $this->container['shipment_method'] = $data['shipment_method'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 80)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 80)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['tax_registration_number']) && (mb_strlen($this->container['tax_registration_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'tax_registration_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (v1.0) The id property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number (v1.0) The number property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name (v1.0) The displayName property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Customer., must be smaller than or equal to 100.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type (v1.0) The type property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\Postaladdresstype|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\Postaladdresstype|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number (v1.0) The phoneNumber property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email (v1.0) The email property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 80)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 80.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website (v1.0) The website property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 80)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Customer., must be smaller than or equal to 80.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets tax_liable
     *
     * @return bool|null
     */
    public function getTaxLiable()
    {
        return $this->container['tax_liable'];
    }

    /**
     * Sets tax_liable
     *
     * @param bool|null $tax_liable (v1.0) The taxLiable property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setTaxLiable($tax_liable)
    {
        $this->container['tax_liable'] = $tax_liable;

        return $this;
    }

    /**
     * Gets tax_area_id
     *
     * @return string|null
     */
    public function getTaxAreaId()
    {
        return $this->container['tax_area_id'];
    }

    /**
     * Sets tax_area_id
     *
     * @param string|null $tax_area_id (v1.0) The taxAreaId property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setTaxAreaId($tax_area_id)
    {
        $this->container['tax_area_id'] = $tax_area_id;

        return $this;
    }

    /**
     * Gets tax_area_display_name
     *
     * @return string|null
     */
    public function getTaxAreaDisplayName()
    {
        return $this->container['tax_area_display_name'];
    }

    /**
     * Sets tax_area_display_name
     *
     * @param string|null $tax_area_display_name (v1.0) The taxAreaDisplayName property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setTaxAreaDisplayName($tax_area_display_name)
    {
        $this->container['tax_area_display_name'] = $tax_area_display_name;

        return $this;
    }

    /**
     * Gets tax_registration_number
     *
     * @return string|null
     */
    public function getTaxRegistrationNumber()
    {
        return $this->container['tax_registration_number'];
    }

    /**
     * Sets tax_registration_number
     *
     * @param string|null $tax_registration_number (v1.0) The taxRegistrationNumber property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setTaxRegistrationNumber($tax_registration_number)
    {
        if (!is_null($tax_registration_number) && (mb_strlen($tax_registration_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $tax_registration_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['tax_registration_number'] = $tax_registration_number;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string|null $currency_id (v1.0) The currencyId property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code (v1.0) The currencyCode property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payment_terms_id
     *
     * @return string|null
     */
    public function getPaymentTermsId()
    {
        return $this->container['payment_terms_id'];
    }

    /**
     * Sets payment_terms_id
     *
     * @param string|null $payment_terms_id (v1.0) The paymentTermsId property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setPaymentTermsId($payment_terms_id)
    {
        $this->container['payment_terms_id'] = $payment_terms_id;

        return $this;
    }

    /**
     * Gets shipment_method_id
     *
     * @return string|null
     */
    public function getShipmentMethodId()
    {
        return $this->container['shipment_method_id'];
    }

    /**
     * Sets shipment_method_id
     *
     * @param string|null $shipment_method_id (v1.0) The shipmentMethodId property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setShipmentMethodId($shipment_method_id)
    {
        $this->container['shipment_method_id'] = $shipment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id (v1.0) The paymentMethodId property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return string|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param string|null $blocked (v1.0) The blocked property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime|null $last_modified_date_time (v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central customer entity
     *
     * @return self
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets customer_financial_details
     *
     * @return \OpenAPI\Client\Model\CustomerFinancialDetail[]|null
     */
    public function getCustomerFinancialDetails()
    {
        return $this->container['customer_financial_details'];
    }

    /**
     * Sets customer_financial_details
     *
     * @param \OpenAPI\Client\Model\CustomerFinancialDetail[]|null $customer_financial_details customer_financial_details
     *
     * @return self
     */
    public function setCustomerFinancialDetails($customer_financial_details)
    {
        $this->container['customer_financial_details'] = $customer_financial_details;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\Picture[]|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\Picture[]|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets default_dimensions
     *
     * @return \OpenAPI\Client\Model\DefaultDimensions[]|null
     */
    public function getDefaultDimensions()
    {
        return $this->container['default_dimensions'];
    }

    /**
     * Sets default_dimensions
     *
     * @param \OpenAPI\Client\Model\DefaultDimensions[]|null $default_dimensions default_dimensions
     *
     * @return self
     */
    public function setDefaultDimensions($default_dimensions)
    {
        $this->container['default_dimensions'] = $default_dimensions;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_term
     *
     * @return \OpenAPI\Client\Model\PaymentTerm|null
     */
    public function getPaymentTerm()
    {
        return $this->container['payment_term'];
    }

    /**
     * Sets payment_term
     *
     * @param \OpenAPI\Client\Model\PaymentTerm|null $payment_term payment_term
     *
     * @return self
     */
    public function setPaymentTerm($payment_term)
    {
        $this->container['payment_term'] = $payment_term;

        return $this;
    }

    /**
     * Gets shipment_method
     *
     * @return \OpenAPI\Client\Model\ShipmentMethod|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     *
     * @param \OpenAPI\Client\Model\ShipmentMethod|null $shipment_method shipment_method
     *
     * @return self
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \OpenAPI\Client\Model\PaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \OpenAPI\Client\Model\PaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


