<?php
/**
 * Employee
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Employee Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Employee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'employee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'display_name' => 'string',
        'given_name' => 'string',
        'middle_name' => 'string',
        'surname' => 'string',
        'job_title' => 'string',
        'address' => '\OpenAPI\Client\Model\Postaladdresstype',
        'phone_number' => 'string',
        'mobile_phone' => 'string',
        'email' => 'string',
        'personal_email' => 'string',
        'employment_date' => '\DateTime',
        'termination_date' => '\DateTime',
        'status' => 'string',
        'birth_date' => '\DateTime',
        'statistics_group_code' => 'string',
        'last_modified_date_time' => '\DateTime',
        'picture' => '\OpenAPI\Client\Model\Picture[]',
        'default_dimensions' => '\OpenAPI\Client\Model\DefaultDimensions[]',
        'time_registration_entries' => '\OpenAPI\Client\Model\TimeRegistrationEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'display_name' => null,
        'given_name' => null,
        'middle_name' => null,
        'surname' => null,
        'job_title' => null,
        'address' => null,
        'phone_number' => null,
        'mobile_phone' => null,
        'email' => null,
        'personal_email' => null,
        'employment_date' => 'date-time',
        'termination_date' => 'date-time',
        'status' => null,
        'birth_date' => 'date-time',
        'statistics_group_code' => null,
        'last_modified_date_time' => 'date-time',
        'picture' => null,
        'default_dimensions' => null,
        'time_registration_entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'display_name' => 'displayName',
        'given_name' => 'givenName',
        'middle_name' => 'middleName',
        'surname' => 'surname',
        'job_title' => 'jobTitle',
        'address' => 'address',
        'phone_number' => 'phoneNumber',
        'mobile_phone' => 'mobilePhone',
        'email' => 'email',
        'personal_email' => 'personalEmail',
        'employment_date' => 'employmentDate',
        'termination_date' => 'terminationDate',
        'status' => 'status',
        'birth_date' => 'birthDate',
        'statistics_group_code' => 'statisticsGroupCode',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'picture' => 'picture',
        'default_dimensions' => 'defaultDimensions',
        'time_registration_entries' => 'timeRegistrationEntries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'display_name' => 'setDisplayName',
        'given_name' => 'setGivenName',
        'middle_name' => 'setMiddleName',
        'surname' => 'setSurname',
        'job_title' => 'setJobTitle',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'mobile_phone' => 'setMobilePhone',
        'email' => 'setEmail',
        'personal_email' => 'setPersonalEmail',
        'employment_date' => 'setEmploymentDate',
        'termination_date' => 'setTerminationDate',
        'status' => 'setStatus',
        'birth_date' => 'setBirthDate',
        'statistics_group_code' => 'setStatisticsGroupCode',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'picture' => 'setPicture',
        'default_dimensions' => 'setDefaultDimensions',
        'time_registration_entries' => 'setTimeRegistrationEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'display_name' => 'getDisplayName',
        'given_name' => 'getGivenName',
        'middle_name' => 'getMiddleName',
        'surname' => 'getSurname',
        'job_title' => 'getJobTitle',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'mobile_phone' => 'getMobilePhone',
        'email' => 'getEmail',
        'personal_email' => 'getPersonalEmail',
        'employment_date' => 'getEmploymentDate',
        'termination_date' => 'getTerminationDate',
        'status' => 'getStatus',
        'birth_date' => 'getBirthDate',
        'statistics_group_code' => 'getStatisticsGroupCode',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'picture' => 'getPicture',
        'default_dimensions' => 'getDefaultDimensions',
        'time_registration_entries' => 'getTimeRegistrationEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['given_name'] = $data['given_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['surname'] = $data['surname'] ?? null;
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['mobile_phone'] = $data['mobile_phone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['personal_email'] = $data['personal_email'] ?? null;
        $this->container['employment_date'] = $data['employment_date'] ?? null;
        $this->container['termination_date'] = $data['termination_date'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['statistics_group_code'] = $data['statistics_group_code'] ?? null;
        $this->container['last_modified_date_time'] = $data['last_modified_date_time'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['default_dimensions'] = $data['default_dimensions'] ?? null;
        $this->container['time_registration_entries'] = $data['time_registration_entries'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['given_name']) && (mb_strlen($this->container['given_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'given_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['surname']) && (mb_strlen($this->container['surname']) > 30)) {
            $invalidProperties[] = "invalid value for 'surname', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['job_title']) && (mb_strlen($this->container['job_title']) > 30)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 30)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 80)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['personal_email']) && (mb_strlen($this->container['personal_email']) > 80)) {
            $invalidProperties[] = "invalid value for 'personal_email', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['statistics_group_code']) && (mb_strlen($this->container['statistics_group_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'statistics_group_code', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (v1.0) The id property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number (v1.0) The number property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Employee., must be smaller than or equal to 20.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name (v1.0) The displayName property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name (v1.0) The givenName property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        if (!is_null($given_name) && (mb_strlen($given_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $given_name when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name (v1.0) The middleName property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname (v1.0) The surname property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (!is_null($surname) && (mb_strlen($surname) > 30)) {
            throw new \InvalidArgumentException('invalid length for $surname when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title (v1.0) The jobTitle property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (!is_null($job_title) && (mb_strlen($job_title) > 30)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\Postaladdresstype|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\Postaladdresstype|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number (v1.0) The phoneNumber property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone (v1.0) The mobilePhone property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) > 30)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling Employee., must be smaller than or equal to 30.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email (v1.0) The email property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 80)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Employee., must be smaller than or equal to 80.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets personal_email
     *
     * @return string|null
     */
    public function getPersonalEmail()
    {
        return $this->container['personal_email'];
    }

    /**
     * Sets personal_email
     *
     * @param string|null $personal_email (v1.0) The personalEmail property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setPersonalEmail($personal_email)
    {
        if (!is_null($personal_email) && (mb_strlen($personal_email) > 80)) {
            throw new \InvalidArgumentException('invalid length for $personal_email when calling Employee., must be smaller than or equal to 80.');
        }

        $this->container['personal_email'] = $personal_email;

        return $this;
    }

    /**
     * Gets employment_date
     *
     * @return \DateTime|null
     */
    public function getEmploymentDate()
    {
        return $this->container['employment_date'];
    }

    /**
     * Sets employment_date
     *
     * @param \DateTime|null $employment_date (v1.0) The employmentDate property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setEmploymentDate($employment_date)
    {
        $this->container['employment_date'] = $employment_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date (v1.0) The terminationDate property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status (v1.0) The status property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date (v1.0) The birthDate property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets statistics_group_code
     *
     * @return string|null
     */
    public function getStatisticsGroupCode()
    {
        return $this->container['statistics_group_code'];
    }

    /**
     * Sets statistics_group_code
     *
     * @param string|null $statistics_group_code (v1.0) The statisticsGroupCode property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setStatisticsGroupCode($statistics_group_code)
    {
        if (!is_null($statistics_group_code) && (mb_strlen($statistics_group_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $statistics_group_code when calling Employee., must be smaller than or equal to 10.');
        }

        $this->container['statistics_group_code'] = $statistics_group_code;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime|null $last_modified_date_time (v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central employee entity
     *
     * @return self
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\Picture[]|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\Picture[]|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets default_dimensions
     *
     * @return \OpenAPI\Client\Model\DefaultDimensions[]|null
     */
    public function getDefaultDimensions()
    {
        return $this->container['default_dimensions'];
    }

    /**
     * Sets default_dimensions
     *
     * @param \OpenAPI\Client\Model\DefaultDimensions[]|null $default_dimensions default_dimensions
     *
     * @return self
     */
    public function setDefaultDimensions($default_dimensions)
    {
        $this->container['default_dimensions'] = $default_dimensions;

        return $this;
    }

    /**
     * Gets time_registration_entries
     *
     * @return \OpenAPI\Client\Model\TimeRegistrationEntry[]|null
     */
    public function getTimeRegistrationEntries()
    {
        return $this->container['time_registration_entries'];
    }

    /**
     * Sets time_registration_entries
     *
     * @param \OpenAPI\Client\Model\TimeRegistrationEntry[]|null $time_registration_entries time_registration_entries
     *
     * @return self
     */
    public function setTimeRegistrationEntries($time_registration_entries)
    {
        $this->container['time_registration_entries'] = $time_registration_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


