<?php
/**
 * VendorPurchase
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VendorPurchase Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VendorPurchase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vendorPurchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_id' => 'string',
        'vendor_number' => 'string',
        'name' => 'string',
        'total_purchase_amount' => 'float',
        'date_filter_filter_only' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_id' => 'uuid',
        'vendor_number' => null,
        'name' => null,
        'total_purchase_amount' => 'decimal',
        'date_filter_filter_only' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_id' => 'vendorId',
        'vendor_number' => 'vendorNumber',
        'name' => 'name',
        'total_purchase_amount' => 'totalPurchaseAmount',
        'date_filter_filter_only' => 'dateFilter_FilterOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_id' => 'setVendorId',
        'vendor_number' => 'setVendorNumber',
        'name' => 'setName',
        'total_purchase_amount' => 'setTotalPurchaseAmount',
        'date_filter_filter_only' => 'setDateFilterFilterOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_id' => 'getVendorId',
        'vendor_number' => 'getVendorNumber',
        'name' => 'getName',
        'total_purchase_amount' => 'getTotalPurchaseAmount',
        'date_filter_filter_only' => 'getDateFilterFilterOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor_id'] = $data['vendor_id'] ?? null;
        $this->container['vendor_number'] = $data['vendor_number'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['total_purchase_amount'] = $data['total_purchase_amount'] ?? null;
        $this->container['date_filter_filter_only'] = $data['date_filter_filter_only'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vendor_number']) && (mb_strlen($this->container['vendor_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'vendor_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_id
     *
     * @return string|null
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string|null $vendor_id (v1.0) The vendorId property for the Dynamics 365 Business Central vendorPurchase entity
     *
     * @return self
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_number
     *
     * @return string|null
     */
    public function getVendorNumber()
    {
        return $this->container['vendor_number'];
    }

    /**
     * Sets vendor_number
     *
     * @param string|null $vendor_number (v1.0) The vendorNumber property for the Dynamics 365 Business Central vendorPurchase entity
     *
     * @return self
     */
    public function setVendorNumber($vendor_number)
    {
        if (!is_null($vendor_number) && (mb_strlen($vendor_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vendor_number when calling VendorPurchase., must be smaller than or equal to 20.');
        }

        $this->container['vendor_number'] = $vendor_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name (v1.0) The name property for the Dynamics 365 Business Central vendorPurchase entity
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VendorPurchase., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets total_purchase_amount
     *
     * @return float|null
     */
    public function getTotalPurchaseAmount()
    {
        return $this->container['total_purchase_amount'];
    }

    /**
     * Sets total_purchase_amount
     *
     * @param float|null $total_purchase_amount (v1.0) The totalPurchaseAmount property for the Dynamics 365 Business Central vendorPurchase entity
     *
     * @return self
     */
    public function setTotalPurchaseAmount($total_purchase_amount)
    {
        $this->container['total_purchase_amount'] = $total_purchase_amount;

        return $this;
    }

    /**
     * Gets date_filter_filter_only
     *
     * @return \DateTime|null
     */
    public function getDateFilterFilterOnly()
    {
        return $this->container['date_filter_filter_only'];
    }

    /**
     * Sets date_filter_filter_only
     *
     * @param \DateTime|null $date_filter_filter_only (v1.0) The dateFilter_FilterOnly property for the Dynamics 365 Business Central vendorPurchase entity
     *
     * @return self
     */
    public function setDateFilterFilterOnly($date_filter_filter_only)
    {
        $this->container['date_filter_filter_only'] = $date_filter_filter_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


