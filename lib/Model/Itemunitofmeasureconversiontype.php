<?php
/**
 * Itemunitofmeasureconversiontype
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Itemunitofmeasureconversiontype Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Itemunitofmeasureconversiontype implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'itemunitofmeasureconversiontype';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'to_unit_of_measure' => 'string',
        'from_to_conversion_rate' => 'float',
        'picture' => '\OpenAPI\Client\Model\Picture[]',
        'default_dimensions' => '\OpenAPI\Client\Model\DefaultDimensions[]',
        'item_category' => '\OpenAPI\Client\Model\ItemCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'to_unit_of_measure' => null,
        'from_to_conversion_rate' => 'decimal',
        'picture' => null,
        'default_dimensions' => null,
        'item_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'to_unit_of_measure' => 'toUnitOfMeasure',
        'from_to_conversion_rate' => 'fromToConversionRate',
        'picture' => 'picture',
        'default_dimensions' => 'defaultDimensions',
        'item_category' => 'itemCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'to_unit_of_measure' => 'setToUnitOfMeasure',
        'from_to_conversion_rate' => 'setFromToConversionRate',
        'picture' => 'setPicture',
        'default_dimensions' => 'setDefaultDimensions',
        'item_category' => 'setItemCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'to_unit_of_measure' => 'getToUnitOfMeasure',
        'from_to_conversion_rate' => 'getFromToConversionRate',
        'picture' => 'getPicture',
        'default_dimensions' => 'getDefaultDimensions',
        'item_category' => 'getItemCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to_unit_of_measure'] = $data['to_unit_of_measure'] ?? null;
        $this->container['from_to_conversion_rate'] = $data['from_to_conversion_rate'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['default_dimensions'] = $data['default_dimensions'] ?? null;
        $this->container['item_category'] = $data['item_category'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['to_unit_of_measure']) && (mb_strlen($this->container['to_unit_of_measure']) > 10)) {
            $invalidProperties[] = "invalid value for 'to_unit_of_measure', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets to_unit_of_measure
     *
     * @return string|null
     */
    public function getToUnitOfMeasure()
    {
        return $this->container['to_unit_of_measure'];
    }

    /**
     * Sets to_unit_of_measure
     *
     * @param string|null $to_unit_of_measure (v1.0) The toUnitOfMeasure property for the Dynamics 365 Business Central itemunitofmeasureconversiontype entity
     *
     * @return self
     */
    public function setToUnitOfMeasure($to_unit_of_measure)
    {
        if (!is_null($to_unit_of_measure) && (mb_strlen($to_unit_of_measure) > 10)) {
            throw new \InvalidArgumentException('invalid length for $to_unit_of_measure when calling Itemunitofmeasureconversiontype., must be smaller than or equal to 10.');
        }

        $this->container['to_unit_of_measure'] = $to_unit_of_measure;

        return $this;
    }

    /**
     * Gets from_to_conversion_rate
     *
     * @return float|null
     */
    public function getFromToConversionRate()
    {
        return $this->container['from_to_conversion_rate'];
    }

    /**
     * Sets from_to_conversion_rate
     *
     * @param float|null $from_to_conversion_rate (v1.0) The fromToConversionRate property for the Dynamics 365 Business Central itemunitofmeasureconversiontype entity
     *
     * @return self
     */
    public function setFromToConversionRate($from_to_conversion_rate)
    {
        $this->container['from_to_conversion_rate'] = $from_to_conversion_rate;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\Picture[]|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\Picture[]|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets default_dimensions
     *
     * @return \OpenAPI\Client\Model\DefaultDimensions[]|null
     */
    public function getDefaultDimensions()
    {
        return $this->container['default_dimensions'];
    }

    /**
     * Sets default_dimensions
     *
     * @param \OpenAPI\Client\Model\DefaultDimensions[]|null $default_dimensions default_dimensions
     *
     * @return self
     */
    public function setDefaultDimensions($default_dimensions)
    {
        $this->container['default_dimensions'] = $default_dimensions;

        return $this;
    }

    /**
     * Gets item_category
     *
     * @return \OpenAPI\Client\Model\ItemCategory|null
     */
    public function getItemCategory()
    {
        return $this->container['item_category'];
    }

    /**
     * Sets item_category
     *
     * @param \OpenAPI\Client\Model\ItemCategory|null $item_category item_category
     *
     * @return self
     */
    public function setItemCategory($item_category)
    {
        $this->container['item_category'] = $item_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


