<?php
/**
 * TimeRegistrationEntry
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TimeRegistrationEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimeRegistrationEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'timeRegistrationEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'employee_id' => 'string',
        'employee_number' => 'string',
        'job_id' => 'string',
        'job_number' => 'string',
        'absence' => 'string',
        'line_number' => 'int',
        'date' => '\DateTime',
        'quantity' => 'float',
        'status' => 'string',
        'unit_of_measure_id' => 'string',
        'unit_of_measure' => '\OpenAPI\Client\Model\Unitofmeasuretype',
        'dimensions' => '\OpenAPI\Client\Model\Dimensiontype[]',
        'last_modfied_date_time' => '\DateTime',
        'project' => '\OpenAPI\Client\Model\Project'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'employee_id' => 'uuid',
        'employee_number' => null,
        'job_id' => 'uuid',
        'job_number' => null,
        'absence' => null,
        'line_number' => 'int32',
        'date' => 'date-time',
        'quantity' => 'decimal',
        'status' => null,
        'unit_of_measure_id' => 'uuid',
        'unit_of_measure' => null,
        'dimensions' => null,
        'last_modfied_date_time' => 'date-time',
        'project' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'employee_number' => 'employeeNumber',
        'job_id' => 'jobId',
        'job_number' => 'jobNumber',
        'absence' => 'absence',
        'line_number' => 'lineNumber',
        'date' => 'date',
        'quantity' => 'quantity',
        'status' => 'status',
        'unit_of_measure_id' => 'unitOfMeasureId',
        'unit_of_measure' => 'unitOfMeasure',
        'dimensions' => 'dimensions',
        'last_modfied_date_time' => 'lastModfiedDateTime',
        'project' => 'project'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'employee_number' => 'setEmployeeNumber',
        'job_id' => 'setJobId',
        'job_number' => 'setJobNumber',
        'absence' => 'setAbsence',
        'line_number' => 'setLineNumber',
        'date' => 'setDate',
        'quantity' => 'setQuantity',
        'status' => 'setStatus',
        'unit_of_measure_id' => 'setUnitOfMeasureId',
        'unit_of_measure' => 'setUnitOfMeasure',
        'dimensions' => 'setDimensions',
        'last_modfied_date_time' => 'setLastModfiedDateTime',
        'project' => 'setProject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'employee_number' => 'getEmployeeNumber',
        'job_id' => 'getJobId',
        'job_number' => 'getJobNumber',
        'absence' => 'getAbsence',
        'line_number' => 'getLineNumber',
        'date' => 'getDate',
        'quantity' => 'getQuantity',
        'status' => 'getStatus',
        'unit_of_measure_id' => 'getUnitOfMeasureId',
        'unit_of_measure' => 'getUnitOfMeasure',
        'dimensions' => 'getDimensions',
        'last_modfied_date_time' => 'getLastModfiedDateTime',
        'project' => 'getProject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['employee_id'] = $data['employee_id'] ?? null;
        $this->container['employee_number'] = $data['employee_number'] ?? null;
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['job_number'] = $data['job_number'] ?? null;
        $this->container['absence'] = $data['absence'] ?? null;
        $this->container['line_number'] = $data['line_number'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['unit_of_measure_id'] = $data['unit_of_measure_id'] ?? null;
        $this->container['unit_of_measure'] = $data['unit_of_measure'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['last_modfied_date_time'] = $data['last_modfied_date_time'] ?? null;
        $this->container['project'] = $data['project'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['employee_number']) && (mb_strlen($this->container['employee_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'employee_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['job_number']) && (mb_strlen($this->container['job_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'job_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['absence']) && (mb_strlen($this->container['absence']) > 10)) {
            $invalidProperties[] = "invalid value for 'absence', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (v1.0) The id property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id (v1.0) The employeeId property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number (v1.0) The employeeNumber property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (!is_null($employee_number) && (mb_strlen($employee_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $employee_number when calling TimeRegistrationEntry., must be smaller than or equal to 20.');
        }

        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return string|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string|null $job_id (v1.0) The jobId property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_number
     *
     * @return string|null
     */
    public function getJobNumber()
    {
        return $this->container['job_number'];
    }

    /**
     * Sets job_number
     *
     * @param string|null $job_number (v1.0) The jobNumber property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setJobNumber($job_number)
    {
        if (!is_null($job_number) && (mb_strlen($job_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $job_number when calling TimeRegistrationEntry., must be smaller than or equal to 20.');
        }

        $this->container['job_number'] = $job_number;

        return $this;
    }

    /**
     * Gets absence
     *
     * @return string|null
     */
    public function getAbsence()
    {
        return $this->container['absence'];
    }

    /**
     * Sets absence
     *
     * @param string|null $absence (v1.0) The absence property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setAbsence($absence)
    {
        if (!is_null($absence) && (mb_strlen($absence) > 10)) {
            throw new \InvalidArgumentException('invalid length for $absence when calling TimeRegistrationEntry., must be smaller than or equal to 10.');
        }

        $this->container['absence'] = $absence;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int|null
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int|null $line_number (v1.0) The lineNumber property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date (v1.0) The date property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity (v1.0) The quantity property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status (v1.0) The status property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets unit_of_measure_id
     *
     * @return string|null
     */
    public function getUnitOfMeasureId()
    {
        return $this->container['unit_of_measure_id'];
    }

    /**
     * Sets unit_of_measure_id
     *
     * @param string|null $unit_of_measure_id (v1.0) The unitOfMeasureId property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setUnitOfMeasureId($unit_of_measure_id)
    {
        $this->container['unit_of_measure_id'] = $unit_of_measure_id;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return \OpenAPI\Client\Model\Unitofmeasuretype|null
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param \OpenAPI\Client\Model\Unitofmeasuretype|null $unit_of_measure unit_of_measure
     *
     * @return self
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \OpenAPI\Client\Model\Dimensiontype[]|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \OpenAPI\Client\Model\Dimensiontype[]|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets last_modfied_date_time
     *
     * @return \DateTime|null
     */
    public function getLastModfiedDateTime()
    {
        return $this->container['last_modfied_date_time'];
    }

    /**
     * Sets last_modfied_date_time
     *
     * @param \DateTime|null $last_modfied_date_time (v1.0) The lastModfiedDateTime property for the Dynamics 365 Business Central timeRegistrationEntry entity
     *
     * @return self
     */
    public function setLastModfiedDateTime($last_modfied_date_time)
    {
        $this->container['last_modfied_date_time'] = $last_modfied_date_time;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\Project|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\Project|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


