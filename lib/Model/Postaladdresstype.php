<?php
/**
 * Postaladdresstype
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Postaladdresstype Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Postaladdresstype implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'postaladdresstype';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'street' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country_letter_code' => 'string',
        'postal_code' => 'string',
        'customer_financial_details' => '\OpenAPI\Client\Model\CustomerFinancialDetail[]',
        'picture' => '\OpenAPI\Client\Model\Picture[]',
        'default_dimensions' => '\OpenAPI\Client\Model\DefaultDimensions[]',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'payment_term' => '\OpenAPI\Client\Model\PaymentTerm',
        'shipment_method' => '\OpenAPI\Client\Model\ShipmentMethod',
        'payment_method' => '\OpenAPI\Client\Model\PaymentMethod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'street' => null,
        'city' => null,
        'state' => null,
        'country_letter_code' => null,
        'postal_code' => null,
        'customer_financial_details' => null,
        'picture' => null,
        'default_dimensions' => null,
        'currency' => null,
        'payment_term' => null,
        'shipment_method' => null,
        'payment_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street' => 'street',
        'city' => 'city',
        'state' => 'state',
        'country_letter_code' => 'countryLetterCode',
        'postal_code' => 'postalCode',
        'customer_financial_details' => 'customerFinancialDetails',
        'picture' => 'picture',
        'default_dimensions' => 'defaultDimensions',
        'currency' => 'currency',
        'payment_term' => 'paymentTerm',
        'shipment_method' => 'shipmentMethod',
        'payment_method' => 'paymentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street' => 'setStreet',
        'city' => 'setCity',
        'state' => 'setState',
        'country_letter_code' => 'setCountryLetterCode',
        'postal_code' => 'setPostalCode',
        'customer_financial_details' => 'setCustomerFinancialDetails',
        'picture' => 'setPicture',
        'default_dimensions' => 'setDefaultDimensions',
        'currency' => 'setCurrency',
        'payment_term' => 'setPaymentTerm',
        'shipment_method' => 'setShipmentMethod',
        'payment_method' => 'setPaymentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street' => 'getStreet',
        'city' => 'getCity',
        'state' => 'getState',
        'country_letter_code' => 'getCountryLetterCode',
        'postal_code' => 'getPostalCode',
        'customer_financial_details' => 'getCustomerFinancialDetails',
        'picture' => 'getPicture',
        'default_dimensions' => 'getDefaultDimensions',
        'currency' => 'getCurrency',
        'payment_term' => 'getPaymentTerm',
        'shipment_method' => 'getShipmentMethod',
        'payment_method' => 'getPaymentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['street'] = $data['street'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['country_letter_code'] = $data['country_letter_code'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['customer_financial_details'] = $data['customer_financial_details'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['default_dimensions'] = $data['default_dimensions'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['payment_term'] = $data['payment_term'] ?? null;
        $this->container['shipment_method'] = $data['shipment_method'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 152)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 152.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 30)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['country_letter_code']) && (mb_strlen($this->container['country_letter_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'country_letter_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street (v1.0) The street property for the Dynamics 365 Business Central postaladdresstype entity
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (mb_strlen($street) > 152)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Postaladdresstype., must be smaller than or equal to 152.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city (v1.0) The city property for the Dynamics 365 Business Central postaladdresstype entity
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Postaladdresstype., must be smaller than or equal to 30.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state (v1.0) The state property for the Dynamics 365 Business Central postaladdresstype entity
     *
     * @return self
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 30)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Postaladdresstype., must be smaller than or equal to 30.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country_letter_code
     *
     * @return string|null
     */
    public function getCountryLetterCode()
    {
        return $this->container['country_letter_code'];
    }

    /**
     * Sets country_letter_code
     *
     * @param string|null $country_letter_code (v1.0) The countryLetterCode property for the Dynamics 365 Business Central postaladdresstype entity
     *
     * @return self
     */
    public function setCountryLetterCode($country_letter_code)
    {
        if (!is_null($country_letter_code) && (mb_strlen($country_letter_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $country_letter_code when calling Postaladdresstype., must be smaller than or equal to 10.');
        }

        $this->container['country_letter_code'] = $country_letter_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code (v1.0) The postalCode property for the Dynamics 365 Business Central postaladdresstype entity
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Postaladdresstype., must be smaller than or equal to 20.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets customer_financial_details
     *
     * @return \OpenAPI\Client\Model\CustomerFinancialDetail[]|null
     */
    public function getCustomerFinancialDetails()
    {
        return $this->container['customer_financial_details'];
    }

    /**
     * Sets customer_financial_details
     *
     * @param \OpenAPI\Client\Model\CustomerFinancialDetail[]|null $customer_financial_details customer_financial_details
     *
     * @return self
     */
    public function setCustomerFinancialDetails($customer_financial_details)
    {
        $this->container['customer_financial_details'] = $customer_financial_details;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\Picture[]|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\Picture[]|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets default_dimensions
     *
     * @return \OpenAPI\Client\Model\DefaultDimensions[]|null
     */
    public function getDefaultDimensions()
    {
        return $this->container['default_dimensions'];
    }

    /**
     * Sets default_dimensions
     *
     * @param \OpenAPI\Client\Model\DefaultDimensions[]|null $default_dimensions default_dimensions
     *
     * @return self
     */
    public function setDefaultDimensions($default_dimensions)
    {
        $this->container['default_dimensions'] = $default_dimensions;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_term
     *
     * @return \OpenAPI\Client\Model\PaymentTerm|null
     */
    public function getPaymentTerm()
    {
        return $this->container['payment_term'];
    }

    /**
     * Sets payment_term
     *
     * @param \OpenAPI\Client\Model\PaymentTerm|null $payment_term payment_term
     *
     * @return self
     */
    public function setPaymentTerm($payment_term)
    {
        $this->container['payment_term'] = $payment_term;

        return $this;
    }

    /**
     * Gets shipment_method
     *
     * @return \OpenAPI\Client\Model\ShipmentMethod|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     *
     * @param \OpenAPI\Client\Model\ShipmentMethod|null $shipment_method shipment_method
     *
     * @return self
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \OpenAPI\Client\Model\PaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \OpenAPI\Client\Model\PaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


