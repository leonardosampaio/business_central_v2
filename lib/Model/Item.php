<?php
/**
 * Item
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'display_name' => 'string',
        'type' => 'string',
        'item_category_id' => 'string',
        'item_category_code' => 'string',
        'blocked' => 'bool',
        'base_unit_of_measure_id' => 'string',
        'base_unit_of_measure' => '\OpenAPI\Client\Model\Unitofmeasuretype',
        'gtin' => 'string',
        'inventory' => 'float',
        'unit_price' => 'float',
        'price_includes_tax' => 'bool',
        'unit_cost' => 'float',
        'tax_group_id' => 'string',
        'tax_group_code' => 'string',
        'last_modified_date_time' => '\DateTime',
        'picture' => '\OpenAPI\Client\Model\Picture[]',
        'default_dimensions' => '\OpenAPI\Client\Model\DefaultDimensions[]',
        'item_category' => '\OpenAPI\Client\Model\ItemCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'display_name' => null,
        'type' => null,
        'item_category_id' => 'uuid',
        'item_category_code' => null,
        'blocked' => null,
        'base_unit_of_measure_id' => 'uuid',
        'base_unit_of_measure' => null,
        'gtin' => null,
        'inventory' => 'decimal',
        'unit_price' => 'decimal',
        'price_includes_tax' => null,
        'unit_cost' => 'decimal',
        'tax_group_id' => 'uuid',
        'tax_group_code' => null,
        'last_modified_date_time' => 'date-time',
        'picture' => null,
        'default_dimensions' => null,
        'item_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'display_name' => 'displayName',
        'type' => 'type',
        'item_category_id' => 'itemCategoryId',
        'item_category_code' => 'itemCategoryCode',
        'blocked' => 'blocked',
        'base_unit_of_measure_id' => 'baseUnitOfMeasureId',
        'base_unit_of_measure' => 'baseUnitOfMeasure',
        'gtin' => 'gtin',
        'inventory' => 'inventory',
        'unit_price' => 'unitPrice',
        'price_includes_tax' => 'priceIncludesTax',
        'unit_cost' => 'unitCost',
        'tax_group_id' => 'taxGroupId',
        'tax_group_code' => 'taxGroupCode',
        'last_modified_date_time' => 'lastModifiedDateTime',
        'picture' => 'picture',
        'default_dimensions' => 'defaultDimensions',
        'item_category' => 'itemCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'display_name' => 'setDisplayName',
        'type' => 'setType',
        'item_category_id' => 'setItemCategoryId',
        'item_category_code' => 'setItemCategoryCode',
        'blocked' => 'setBlocked',
        'base_unit_of_measure_id' => 'setBaseUnitOfMeasureId',
        'base_unit_of_measure' => 'setBaseUnitOfMeasure',
        'gtin' => 'setGtin',
        'inventory' => 'setInventory',
        'unit_price' => 'setUnitPrice',
        'price_includes_tax' => 'setPriceIncludesTax',
        'unit_cost' => 'setUnitCost',
        'tax_group_id' => 'setTaxGroupId',
        'tax_group_code' => 'setTaxGroupCode',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'picture' => 'setPicture',
        'default_dimensions' => 'setDefaultDimensions',
        'item_category' => 'setItemCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'display_name' => 'getDisplayName',
        'type' => 'getType',
        'item_category_id' => 'getItemCategoryId',
        'item_category_code' => 'getItemCategoryCode',
        'blocked' => 'getBlocked',
        'base_unit_of_measure_id' => 'getBaseUnitOfMeasureId',
        'base_unit_of_measure' => 'getBaseUnitOfMeasure',
        'gtin' => 'getGtin',
        'inventory' => 'getInventory',
        'unit_price' => 'getUnitPrice',
        'price_includes_tax' => 'getPriceIncludesTax',
        'unit_cost' => 'getUnitCost',
        'tax_group_id' => 'getTaxGroupId',
        'tax_group_code' => 'getTaxGroupCode',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'picture' => 'getPicture',
        'default_dimensions' => 'getDefaultDimensions',
        'item_category' => 'getItemCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['item_category_id'] = $data['item_category_id'] ?? null;
        $this->container['item_category_code'] = $data['item_category_code'] ?? null;
        $this->container['blocked'] = $data['blocked'] ?? null;
        $this->container['base_unit_of_measure_id'] = $data['base_unit_of_measure_id'] ?? null;
        $this->container['base_unit_of_measure'] = $data['base_unit_of_measure'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['inventory'] = $data['inventory'] ?? null;
        $this->container['unit_price'] = $data['unit_price'] ?? null;
        $this->container['price_includes_tax'] = $data['price_includes_tax'] ?? null;
        $this->container['unit_cost'] = $data['unit_cost'] ?? null;
        $this->container['tax_group_id'] = $data['tax_group_id'] ?? null;
        $this->container['tax_group_code'] = $data['tax_group_code'] ?? null;
        $this->container['last_modified_date_time'] = $data['last_modified_date_time'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['default_dimensions'] = $data['default_dimensions'] ?? null;
        $this->container['item_category'] = $data['item_category'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['item_category_code']) && (mb_strlen($this->container['item_category_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'item_category_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['gtin']) && (mb_strlen($this->container['gtin']) > 14)) {
            $invalidProperties[] = "invalid value for 'gtin', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['tax_group_code']) && (mb_strlen($this->container['tax_group_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'tax_group_code', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (v1.0) The id property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number (v1.0) The number property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Item., must be smaller than or equal to 20.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name (v1.0) The displayName property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Item., must be smaller than or equal to 100.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type (v1.0) The type property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets item_category_id
     *
     * @return string|null
     */
    public function getItemCategoryId()
    {
        return $this->container['item_category_id'];
    }

    /**
     * Sets item_category_id
     *
     * @param string|null $item_category_id (v1.0) The itemCategoryId property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setItemCategoryId($item_category_id)
    {
        $this->container['item_category_id'] = $item_category_id;

        return $this;
    }

    /**
     * Gets item_category_code
     *
     * @return string|null
     */
    public function getItemCategoryCode()
    {
        return $this->container['item_category_code'];
    }

    /**
     * Sets item_category_code
     *
     * @param string|null $item_category_code (v1.0) The itemCategoryCode property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setItemCategoryCode($item_category_code)
    {
        if (!is_null($item_category_code) && (mb_strlen($item_category_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $item_category_code when calling Item., must be smaller than or equal to 20.');
        }

        $this->container['item_category_code'] = $item_category_code;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool|null $blocked (v1.0) The blocked property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets base_unit_of_measure_id
     *
     * @return string|null
     */
    public function getBaseUnitOfMeasureId()
    {
        return $this->container['base_unit_of_measure_id'];
    }

    /**
     * Sets base_unit_of_measure_id
     *
     * @param string|null $base_unit_of_measure_id (v1.0) The baseUnitOfMeasureId property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setBaseUnitOfMeasureId($base_unit_of_measure_id)
    {
        $this->container['base_unit_of_measure_id'] = $base_unit_of_measure_id;

        return $this;
    }

    /**
     * Gets base_unit_of_measure
     *
     * @return \OpenAPI\Client\Model\Unitofmeasuretype|null
     */
    public function getBaseUnitOfMeasure()
    {
        return $this->container['base_unit_of_measure'];
    }

    /**
     * Sets base_unit_of_measure
     *
     * @param \OpenAPI\Client\Model\Unitofmeasuretype|null $base_unit_of_measure base_unit_of_measure
     *
     * @return self
     */
    public function setBaseUnitOfMeasure($base_unit_of_measure)
    {
        $this->container['base_unit_of_measure'] = $base_unit_of_measure;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin (v1.0) The gtin property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (!is_null($gtin) && (mb_strlen($gtin) > 14)) {
            throw new \InvalidArgumentException('invalid length for $gtin when calling Item., must be smaller than or equal to 14.');
        }

        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return float|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param float|null $inventory (v1.0) The inventory property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price (v1.0) The unitPrice property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets price_includes_tax
     *
     * @return bool|null
     */
    public function getPriceIncludesTax()
    {
        return $this->container['price_includes_tax'];
    }

    /**
     * Sets price_includes_tax
     *
     * @param bool|null $price_includes_tax (v1.0) The priceIncludesTax property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setPriceIncludesTax($price_includes_tax)
    {
        $this->container['price_includes_tax'] = $price_includes_tax;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return float|null
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param float|null $unit_cost (v1.0) The unitCost property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets tax_group_id
     *
     * @return string|null
     */
    public function getTaxGroupId()
    {
        return $this->container['tax_group_id'];
    }

    /**
     * Sets tax_group_id
     *
     * @param string|null $tax_group_id (v1.0) The taxGroupId property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setTaxGroupId($tax_group_id)
    {
        $this->container['tax_group_id'] = $tax_group_id;

        return $this;
    }

    /**
     * Gets tax_group_code
     *
     * @return string|null
     */
    public function getTaxGroupCode()
    {
        return $this->container['tax_group_code'];
    }

    /**
     * Sets tax_group_code
     *
     * @param string|null $tax_group_code (v1.0) The taxGroupCode property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setTaxGroupCode($tax_group_code)
    {
        if (!is_null($tax_group_code) && (mb_strlen($tax_group_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $tax_group_code when calling Item., must be smaller than or equal to 20.');
        }

        $this->container['tax_group_code'] = $tax_group_code;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime|null $last_modified_date_time (v1.0) The lastModifiedDateTime property for the Dynamics 365 Business Central item entity
     *
     * @return self
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return \OpenAPI\Client\Model\Picture[]|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param \OpenAPI\Client\Model\Picture[]|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets default_dimensions
     *
     * @return \OpenAPI\Client\Model\DefaultDimensions[]|null
     */
    public function getDefaultDimensions()
    {
        return $this->container['default_dimensions'];
    }

    /**
     * Sets default_dimensions
     *
     * @param \OpenAPI\Client\Model\DefaultDimensions[]|null $default_dimensions default_dimensions
     *
     * @return self
     */
    public function setDefaultDimensions($default_dimensions)
    {
        $this->container['default_dimensions'] = $default_dimensions;

        return $this;
    }

    /**
     * Gets item_category
     *
     * @return \OpenAPI\Client\Model\ItemCategory|null
     */
    public function getItemCategory()
    {
        return $this->container['item_category'];
    }

    /**
     * Sets item_category
     *
     * @param \OpenAPI\Client\Model\ItemCategory|null $item_category item_category
     *
     * @return self
     */
    public function setItemCategory($item_category)
    {
        $this->container['item_category'] = $item_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


