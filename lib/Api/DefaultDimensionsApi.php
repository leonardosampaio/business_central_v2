<?php
/**
 * DefaultDimensionsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultDimensionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultDimensionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteDefaultDimensions
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDefaultDimensions($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $this->deleteDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);
    }

    /**
     * Operation deleteDefaultDimensionsWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $request = $this->deleteDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDefaultDimensionsAsync
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsAsync($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        return $this->deleteDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDefaultDimensionsAsyncWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $returnType = '';
        $request = $this->deleteDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDefaultDimensions'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling deleteDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling deleteDefaultDimensions'
            );
        }

        $resourcePath = '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDefaultDimensionsForCustomer
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDefaultDimensionsForCustomer($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $this->deleteDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);
    }

    /**
     * Operation deleteDefaultDimensionsForCustomerWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $request = $this->deleteDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDefaultDimensionsForCustomerAsync
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForCustomerAsync($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        return $this->deleteDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDefaultDimensionsForCustomerAsyncWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $returnType = '';
        $request = $this->deleteDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDefaultDimensionsForCustomer'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling deleteDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling deleteDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling deleteDefaultDimensionsForCustomer'
            );
        }

        $resourcePath = '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDefaultDimensionsForEmployee
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDefaultDimensionsForEmployee($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $this->deleteDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);
    }

    /**
     * Operation deleteDefaultDimensionsForEmployeeWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $request = $this->deleteDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDefaultDimensionsForEmployeeAsync
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForEmployeeAsync($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        return $this->deleteDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDefaultDimensionsForEmployeeAsyncWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $returnType = '';
        $request = $this->deleteDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDefaultDimensionsForEmployee'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling deleteDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling deleteDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling deleteDefaultDimensionsForEmployee'
            );
        }

        $resourcePath = '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employee_id' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDefaultDimensionsForItem
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDefaultDimensionsForItem($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $this->deleteDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);
    }

    /**
     * Operation deleteDefaultDimensionsForItemWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $request = $this->deleteDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDefaultDimensionsForItemAsync
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForItemAsync($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        return $this->deleteDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDefaultDimensionsForItemAsyncWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $returnType = '';
        $request = $this->deleteDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDefaultDimensionsForItem'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling deleteDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling deleteDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling deleteDefaultDimensionsForItem'
            );
        }

        $resourcePath = '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDefaultDimensionsForVendor
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDefaultDimensionsForVendor($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $this->deleteDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);
    }

    /**
     * Operation deleteDefaultDimensionsForVendorWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $request = $this->deleteDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDefaultDimensionsForVendorAsync
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForVendorAsync($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        return $this->deleteDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDefaultDimensionsForVendorAsyncWithHttpInfo
     *
     * Deletes an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        $returnType = '';
        $request = $this->deleteDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDefaultDimensionsForVendor'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null || (is_array($vendor_id) && count($vendor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling deleteDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling deleteDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling deleteDefaultDimensionsForVendor'
            );
        }

        $resourcePath = '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendor_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultDimensions
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function getDefaultDimensions($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        list($response) = $this->getDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);
        return $response;
    }

    /**
     * Operation getDefaultDimensionsWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $request = $this->getDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultDimensionsAsync
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsAsync($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        return $this->getDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultDimensionsAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->getDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultDimensions'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling getDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling getDefaultDimensions'
            );
        }

        $resourcePath = '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultDimensionsForCustomer
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function getDefaultDimensionsForCustomer($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        list($response) = $this->getDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);
        return $response;
    }

    /**
     * Operation getDefaultDimensionsForCustomerWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $request = $this->getDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultDimensionsForCustomerAsync
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForCustomerAsync($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        return $this->getDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultDimensionsForCustomerAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->getDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultDimensionsForCustomer'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling getDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling getDefaultDimensionsForCustomer'
            );
        }

        $resourcePath = '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultDimensionsForEmployee
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function getDefaultDimensionsForEmployee($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        list($response) = $this->getDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);
        return $response;
    }

    /**
     * Operation getDefaultDimensionsForEmployeeWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $request = $this->getDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultDimensionsForEmployeeAsync
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForEmployeeAsync($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        return $this->getDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultDimensionsForEmployeeAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->getDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultDimensionsForEmployee'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling getDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling getDefaultDimensionsForEmployee'
            );
        }

        $resourcePath = '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employee_id' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultDimensionsForItem
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function getDefaultDimensionsForItem($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        list($response) = $this->getDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);
        return $response;
    }

    /**
     * Operation getDefaultDimensionsForItemWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $request = $this->getDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultDimensionsForItemAsync
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForItemAsync($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        return $this->getDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultDimensionsForItemAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->getDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultDimensionsForItem'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling getDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling getDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling getDefaultDimensionsForItem'
            );
        }

        $resourcePath = '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultDimensionsForVendor
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function getDefaultDimensionsForVendor($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        list($response) = $this->getDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);
        return $response;
    }

    /**
     * Operation getDefaultDimensionsForVendorWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $request = $this->getDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultDimensionsForVendorAsync
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForVendorAsync($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        return $this->getDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultDimensionsForVendorAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type defaultDimensions for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->getDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultDimensionsForVendor'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null || (is_array($vendor_id) && count($vendor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling getDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling getDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling getDefaultDimensionsForVendor'
            );
        }

        $resourcePath = '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendor_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDefaultDimensions
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function listDefaultDimensions($company_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        list($response) = $this->listDefaultDimensionsWithHttpInfo($company_id, $top, $skip, $limit, $filter, $expand, $select);
        return $response;
    }

    /**
     * Operation listDefaultDimensionsWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDefaultDimensionsWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $request = $this->listDefaultDimensionsRequest($company_id, $top, $skip, $limit, $filter, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDefaultDimensionsAsync
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsAsync($company_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        return $this->listDefaultDimensionsAsyncWithHttpInfo($company_id, $top, $skip, $limit, $filter, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDefaultDimensionsAsyncWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsAsyncWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->listDefaultDimensionsRequest($company_id, $top, $skip, $limit, $filter, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDefaultDimensions'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDefaultDimensionsRequest($company_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listDefaultDimensions'
            );
        }

        $resourcePath = '/companies({company_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDefaultDimensionsForCustomer
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function listDefaultDimensionsForCustomer($company_id, $customer_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        list($response) = $this->listDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $top, $skip, $limit, $filter, $expand, $select);
        return $response;
    }

    /**
     * Operation listDefaultDimensionsForCustomerWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $request = $this->listDefaultDimensionsForCustomerRequest($company_id, $customer_id, $top, $skip, $limit, $filter, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDefaultDimensionsForCustomerAsync
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForCustomerAsync($company_id, $customer_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        return $this->listDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $top, $skip, $limit, $filter, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDefaultDimensionsForCustomerAsyncWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->listDefaultDimensionsForCustomerRequest($company_id, $customer_id, $top, $skip, $limit, $filter, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDefaultDimensionsForCustomer'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDefaultDimensionsForCustomerRequest($company_id, $customer_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling listDefaultDimensionsForCustomer'
            );
        }

        $resourcePath = '/companies({company_id})/customers({customer_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDefaultDimensionsForEmployee
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function listDefaultDimensionsForEmployee($company_id, $employee_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        list($response) = $this->listDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $top, $skip, $limit, $filter, $expand, $select);
        return $response;
    }

    /**
     * Operation listDefaultDimensionsForEmployeeWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $request = $this->listDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $top, $skip, $limit, $filter, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDefaultDimensionsForEmployeeAsync
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForEmployeeAsync($company_id, $employee_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        return $this->listDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $top, $skip, $limit, $filter, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDefaultDimensionsForEmployeeAsyncWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->listDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $top, $skip, $limit, $filter, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDefaultDimensionsForEmployee'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling listDefaultDimensionsForEmployee'
            );
        }

        $resourcePath = '/companies({company_id})/employees({employee_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employee_id' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDefaultDimensionsForItem
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function listDefaultDimensionsForItem($company_id, $item_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        list($response) = $this->listDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $top, $skip, $limit, $filter, $expand, $select);
        return $response;
    }

    /**
     * Operation listDefaultDimensionsForItemWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $request = $this->listDefaultDimensionsForItemRequest($company_id, $item_id, $top, $skip, $limit, $filter, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDefaultDimensionsForItemAsync
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForItemAsync($company_id, $item_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        return $this->listDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $top, $skip, $limit, $filter, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDefaultDimensionsForItemAsyncWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->listDefaultDimensionsForItemRequest($company_id, $item_id, $top, $skip, $limit, $filter, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDefaultDimensionsForItem'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDefaultDimensionsForItemRequest($company_id, $item_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling listDefaultDimensionsForItem'
            );
        }

        $resourcePath = '/companies({company_id})/items({item_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDefaultDimensionsForVendor
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function listDefaultDimensionsForVendor($company_id, $vendor_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        list($response) = $this->listDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $top, $skip, $limit, $filter, $expand, $select);
        return $response;
    }

    /**
     * Operation listDefaultDimensionsForVendorWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $request = $this->listDefaultDimensionsForVendorRequest($company_id, $vendor_id, $top, $skip, $limit, $filter, $expand, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDefaultDimensionsForVendorAsync
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForVendorAsync($company_id, $vendor_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        return $this->listDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $top, $skip, $limit, $filter, $expand, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDefaultDimensionsForVendorAsyncWithHttpInfo
     *
     * Returns a list of defaultDimensions
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->listDefaultDimensionsForVendorRequest($company_id, $vendor_id, $top, $skip, $limit, $filter, $expand, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDefaultDimensionsForVendor'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $expand (v1.0) Entities to expand (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDefaultDimensionsForVendorRequest($company_id, $vendor_id, $top = null, $skip = null, $limit = null, $filter = null, $expand = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null || (is_array($vendor_id) && count($vendor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling listDefaultDimensionsForVendor'
            );
        }

        $resourcePath = '/companies({company_id})/vendors({vendor_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($expand)) {
            $expand = ObjectSerializer::serializeCollection($expand, 'form', true);
        }
        if ($expand !== null) {
            $queryParams['$expand'] = $expand;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendor_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultDimensions
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function patchDefaultDimensions($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchDefaultDimensionsWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultDimensionsWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultDimensionsAsync
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsAsync($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultDimensionsAsyncWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsAsyncWithHttpInfo($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->patchDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultDimensions'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultDimensionsRequest($company_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling patchDefaultDimensions'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling patchDefaultDimensions'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchDefaultDimensions'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchDefaultDimensions'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchDefaultDimensions'
            );
        }

        $resourcePath = '/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultDimensionsForCustomer
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function patchDefaultDimensionsForCustomer($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchDefaultDimensionsForCustomerWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultDimensionsForCustomerAsync
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForCustomerAsync($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultDimensionsForCustomerAsyncWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->patchDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultDimensionsForCustomer'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultDimensionsForCustomerRequest($company_id, $customer_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchDefaultDimensionsForCustomer'
            );
        }

        $resourcePath = '/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultDimensionsForEmployee
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function patchDefaultDimensionsForEmployee($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchDefaultDimensionsForEmployeeWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultDimensionsForEmployeeAsync
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForEmployeeAsync($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultDimensionsForEmployeeAsyncWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->patchDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultDimensionsForEmployee'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchDefaultDimensionsForEmployee'
            );
        }

        $resourcePath = '/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employee_id' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultDimensionsForItem
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function patchDefaultDimensionsForItem($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchDefaultDimensionsForItemWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultDimensionsForItemAsync
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForItemAsync($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultDimensionsForItemAsyncWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->patchDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultDimensionsForItem'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultDimensionsForItemRequest($company_id, $item_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchDefaultDimensionsForItem'
            );
        }

        $resourcePath = '/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultDimensionsForVendor
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function patchDefaultDimensionsForVendor($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchDefaultDimensionsForVendorWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultDimensionsForVendorAsync
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForVendorAsync($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultDimensionsForVendorAsyncWithHttpInfo
     *
     * Updates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->patchDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultDimensionsForVendor'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $default_dimensions_parent_id (v1.0) parentId for defaultDimensions (required)
     * @param  string $default_dimensions_dimension_id (v1.0) dimensionId for defaultDimensions (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultDimensionsForVendorRequest($company_id, $vendor_id, $default_dimensions_parent_id, $default_dimensions_dimension_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null || (is_array($vendor_id) && count($vendor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_parent_id' is set
        if ($default_dimensions_parent_id === null || (is_array($default_dimensions_parent_id) && count($default_dimensions_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_parent_id when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'default_dimensions_dimension_id' is set
        if ($default_dimensions_dimension_id === null || (is_array($default_dimensions_dimension_id) && count($default_dimensions_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $default_dimensions_dimension_id when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchDefaultDimensionsForVendor'
            );
        }

        $resourcePath = '/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendor_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_parentId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($default_dimensions_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'defaultDimensions_dimensionId' . '}',
                ObjectSerializer::toPathValue($default_dimensions_dimension_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDefaultDimensions
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function postDefaultDimensions($company_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postDefaultDimensionsWithHttpInfo($company_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postDefaultDimensionsWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDefaultDimensionsWithHttpInfo($company_id, $content_type, $unknown_base_type)
    {
        $request = $this->postDefaultDimensionsRequest($company_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDefaultDimensionsAsync
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsAsync($company_id, $content_type, $unknown_base_type)
    {
        return $this->postDefaultDimensionsAsyncWithHttpInfo($company_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDefaultDimensionsAsyncWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsAsyncWithHttpInfo($company_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->postDefaultDimensionsRequest($company_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDefaultDimensions'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDefaultDimensionsRequest($company_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postDefaultDimensions'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDefaultDimensions'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postDefaultDimensions'
            );
        }

        $resourcePath = '/companies({company_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDefaultDimensionsForCustomer
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function postDefaultDimensionsForCustomer($company_id, $customer_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postDefaultDimensionsForCustomerWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDefaultDimensionsForCustomerWithHttpInfo($company_id, $customer_id, $content_type, $unknown_base_type)
    {
        $request = $this->postDefaultDimensionsForCustomerRequest($company_id, $customer_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDefaultDimensionsForCustomerAsync
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForCustomerAsync($company_id, $customer_id, $content_type, $unknown_base_type)
    {
        return $this->postDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDefaultDimensionsForCustomerAsyncWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForCustomerAsyncWithHttpInfo($company_id, $customer_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->postDefaultDimensionsForCustomerRequest($company_id, $customer_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDefaultDimensionsForCustomer'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $customer_id (v1.0) id for customer (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDefaultDimensionsForCustomerRequest($company_id, $customer_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling postDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDefaultDimensionsForCustomer'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postDefaultDimensionsForCustomer'
            );
        }

        $resourcePath = '/companies({company_id})/customers({customer_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDefaultDimensionsForEmployee
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function postDefaultDimensionsForEmployee($company_id, $employee_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postDefaultDimensionsForEmployeeWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDefaultDimensionsForEmployeeWithHttpInfo($company_id, $employee_id, $content_type, $unknown_base_type)
    {
        $request = $this->postDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDefaultDimensionsForEmployeeAsync
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForEmployeeAsync($company_id, $employee_id, $content_type, $unknown_base_type)
    {
        return $this->postDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDefaultDimensionsForEmployeeAsyncWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForEmployeeAsyncWithHttpInfo($company_id, $employee_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->postDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDefaultDimensionsForEmployee'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $employee_id (v1.0) id for employee (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDefaultDimensionsForEmployeeRequest($company_id, $employee_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling postDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDefaultDimensionsForEmployee'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postDefaultDimensionsForEmployee'
            );
        }

        $resourcePath = '/companies({company_id})/employees({employee_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employee_id' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDefaultDimensionsForItem
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function postDefaultDimensionsForItem($company_id, $item_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postDefaultDimensionsForItemWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDefaultDimensionsForItemWithHttpInfo($company_id, $item_id, $content_type, $unknown_base_type)
    {
        $request = $this->postDefaultDimensionsForItemRequest($company_id, $item_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDefaultDimensionsForItemAsync
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForItemAsync($company_id, $item_id, $content_type, $unknown_base_type)
    {
        return $this->postDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDefaultDimensionsForItemAsyncWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForItemAsyncWithHttpInfo($company_id, $item_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->postDefaultDimensionsForItemRequest($company_id, $item_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDefaultDimensionsForItem'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $item_id (v1.0) id for item (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDefaultDimensionsForItemRequest($company_id, $item_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling postDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDefaultDimensionsForItem'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postDefaultDimensionsForItem'
            );
        }

        $resourcePath = '/companies({company_id})/items({item_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDefaultDimensionsForVendor
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultDimensions
     */
    public function postDefaultDimensionsForVendor($company_id, $vendor_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postDefaultDimensionsForVendorWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultDimensions, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDefaultDimensionsForVendorWithHttpInfo($company_id, $vendor_id, $content_type, $unknown_base_type)
    {
        $request = $this->postDefaultDimensionsForVendorRequest($company_id, $vendor_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DefaultDimensions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultDimensions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultDimensions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDefaultDimensionsForVendorAsync
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForVendorAsync($company_id, $vendor_id, $content_type, $unknown_base_type)
    {
        return $this->postDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDefaultDimensionsForVendorAsyncWithHttpInfo
     *
     * Creates an object of type defaultDimensions in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDefaultDimensionsForVendorAsyncWithHttpInfo($company_id, $vendor_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\DefaultDimensions';
        $request = $this->postDefaultDimensionsForVendorRequest($company_id, $vendor_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDefaultDimensionsForVendor'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $vendor_id (v1.0) id for vendor (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDefaultDimensionsForVendorRequest($company_id, $vendor_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'vendor_id' is set
        if ($vendor_id === null || (is_array($vendor_id) && count($vendor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_id when calling postDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDefaultDimensionsForVendor'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postDefaultDimensionsForVendor'
            );
        }

        $resourcePath = '/companies({company_id})/vendors({vendor_id})/defaultDimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendor_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
