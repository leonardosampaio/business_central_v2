<?php
/**
 * AttachmentsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AttachmentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AttachmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAttachments
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAttachments($company_id, $attachments_parent_id, $attachments_id)
    {
        $this->deleteAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id);
    }

    /**
     * Operation deleteAttachmentsWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id)
    {
        $request = $this->deleteAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAttachmentsAsync
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsAsync($company_id, $attachments_parent_id, $attachments_id)
    {
        return $this->deleteAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAttachmentsAsyncWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id)
    {
        $returnType = '';
        $request = $this->deleteAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAttachments'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteAttachments'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling deleteAttachments'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling deleteAttachments'
            );
        }

        $resourcePath = '/companies({company_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAttachmentsForJournalLine
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAttachmentsForJournalLine($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $this->deleteAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id);
    }

    /**
     * Operation deleteAttachmentsForJournalLineWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $request = $this->deleteAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAttachmentsForJournalLineAsync
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsForJournalLineAsync($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        return $this->deleteAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAttachmentsForJournalLineAsyncWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $returnType = '';
        $request = $this->deleteAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAttachmentsForJournalLine'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling deleteAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling deleteAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling deleteAttachmentsForJournalLine'
            );
        }

        $resourcePath = '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAttachmentsForJournalLineForJournal
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAttachmentsForJournalLineForJournal($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $this->deleteAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id);
    }

    /**
     * Operation deleteAttachmentsForJournalLineForJournalWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $request = $this->deleteAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAttachmentsForJournalLineForJournalAsync
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsForJournalLineForJournalAsync($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        return $this->deleteAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAttachmentsForJournalLineForJournalAsyncWithHttpInfo
     *
     * Deletes an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        $returnType = '';
        $request = $this->deleteAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAttachmentsForJournalLineForJournal'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_id' is set
        if ($journal_id === null || (is_array($journal_id) && count($journal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_id when calling deleteAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling deleteAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling deleteAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling deleteAttachmentsForJournalLineForJournal'
            );
        }

        $resourcePath = '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journal_id' . '}',
                ObjectSerializer::toPathValue($journal_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachments
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function getAttachments($company_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        list($response) = $this->getAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $select);
        return $response;
    }

    /**
     * Operation getAttachmentsWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $request = $this->getAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsAsync
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsAsync($company_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        return $this->getAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->getAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachments'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getAttachments'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling getAttachments'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling getAttachments'
            );
        }

        $resourcePath = '/companies({company_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentsForJournalLine
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function getAttachmentsForJournalLine($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        list($response) = $this->getAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);
        return $response;
    }

    /**
     * Operation getAttachmentsForJournalLineWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $request = $this->getAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsForJournalLineAsync
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsForJournalLineAsync($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        return $this->getAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsForJournalLineAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->getAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentsForJournalLine'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling getAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling getAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling getAttachmentsForJournalLine'
            );
        }

        $resourcePath = '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAttachmentsForJournalLineForJournal
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function getAttachmentsForJournalLineForJournal($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        list($response) = $this->getAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);
        return $response;
    }

    /**
     * Operation getAttachmentsForJournalLineForJournalWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $request = $this->getAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttachmentsForJournalLineForJournalAsync
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsForJournalLineForJournalAsync($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        return $this->getAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttachmentsForJournalLineForJournalAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->getAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttachmentsForJournalLineForJournal'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_id' is set
        if ($journal_id === null || (is_array($journal_id) && count($journal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_id when calling getAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling getAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling getAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling getAttachmentsForJournalLineForJournal'
            );
        }

        $resourcePath = '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journal_id' . '}',
                ObjectSerializer::toPathValue($journal_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttachments
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20017
     */
    public function listAttachments($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listAttachmentsWithHttpInfo($company_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listAttachmentsWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttachmentsWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listAttachmentsRequest($company_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20017' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20017', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttachmentsAsync
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsAsync($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listAttachmentsAsyncWithHttpInfo($company_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttachmentsAsyncWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsAsyncWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
        $request = $this->listAttachmentsRequest($company_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttachments'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttachmentsRequest($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listAttachments'
            );
        }

        $resourcePath = '/companies({company_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttachmentsForJournalLine
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20017
     */
    public function listAttachmentsForJournalLine($company_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listAttachmentsForJournalLineWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listAttachmentsForJournalLineRequest($company_id, $journal_line_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20017' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20017', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttachmentsForJournalLineAsync
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsForJournalLineAsync($company_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttachmentsForJournalLineAsyncWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
        $request = $this->listAttachmentsForJournalLineRequest($company_id, $journal_line_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttachmentsForJournalLine'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttachmentsForJournalLineRequest($company_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling listAttachmentsForJournalLine'
            );
        }

        $resourcePath = '/companies({company_id})/journalLines({journalLine_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttachmentsForJournalLineForJournal
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20017
     */
    public function listAttachmentsForJournalLineForJournal($company_id, $journal_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listAttachmentsForJournalLineForJournalWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20017' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20017', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttachmentsForJournalLineForJournalAsync
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsForJournalLineForJournalAsync($company_id, $journal_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttachmentsForJournalLineForJournalAsyncWithHttpInfo
     *
     * Returns a list of attachments
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20017';
        $request = $this->listAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttachmentsForJournalLineForJournal'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_id' is set
        if ($journal_id === null || (is_array($journal_id) && count($journal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_id when calling listAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling listAttachmentsForJournalLineForJournal'
            );
        }

        $resourcePath = '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journal_id' . '}',
                ObjectSerializer::toPathValue($journal_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAttachments
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function patchAttachments($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchAttachmentsWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAttachmentsWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAttachmentsAsync
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsAsync($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAttachmentsAsyncWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsAsyncWithHttpInfo($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->patchAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAttachments'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAttachmentsRequest($company_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchAttachments'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling patchAttachments'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling patchAttachments'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchAttachments'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchAttachments'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchAttachments'
            );
        }

        $resourcePath = '/companies({company_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAttachmentsForJournalLine
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function patchAttachmentsForJournalLine($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchAttachmentsForJournalLineWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAttachmentsForJournalLineAsync
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsForJournalLineAsync($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAttachmentsForJournalLineAsyncWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->patchAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAttachmentsForJournalLine'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAttachmentsForJournalLineRequest($company_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchAttachmentsForJournalLine'
            );
        }

        $resourcePath = '/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAttachmentsForJournalLineForJournal
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function patchAttachmentsForJournalLineForJournal($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        list($response) = $this->patchAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);
        return $response;
    }

    /**
     * Operation patchAttachmentsForJournalLineForJournalWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $request = $this->patchAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAttachmentsForJournalLineForJournalAsync
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsForJournalLineForJournalAsync($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        return $this->patchAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAttachmentsForJournalLineForJournalAsyncWithHttpInfo
     *
     * Updates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->patchAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAttachmentsForJournalLineForJournal'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $attachments_parent_id (v1.0) parentId for attachments (required)
     * @param  string $attachments_id (v1.0) id for attachments (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  string $if_match (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated. (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $attachments_parent_id, $attachments_id, $content_type, $if_match, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_id' is set
        if ($journal_id === null || (is_array($journal_id) && count($journal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_id when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_parent_id' is set
        if ($attachments_parent_id === null || (is_array($attachments_parent_id) && count($attachments_parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_parent_id when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'attachments_id' is set
        if ($attachments_id === null || (is_array($attachments_id) && count($attachments_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments_id when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null || (is_array($if_match) && count($if_match) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling patchAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling patchAttachmentsForJournalLineForJournal'
            );
        }

        $resourcePath = '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journal_id' . '}',
                ObjectSerializer::toPathValue($journal_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_parentId' . '}',
                ObjectSerializer::toPathValue($attachments_parent_id),
                $resourcePath
            );
        }
        // path params
        if ($attachments_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachments_id' . '}',
                ObjectSerializer::toPathValue($attachments_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAttachments
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function postAttachments($company_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postAttachmentsWithHttpInfo($company_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postAttachmentsWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAttachmentsWithHttpInfo($company_id, $content_type, $unknown_base_type)
    {
        $request = $this->postAttachmentsRequest($company_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAttachmentsAsync
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsAsync($company_id, $content_type, $unknown_base_type)
    {
        return $this->postAttachmentsAsyncWithHttpInfo($company_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAttachmentsAsyncWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsAsyncWithHttpInfo($company_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->postAttachmentsRequest($company_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAttachments'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAttachmentsRequest($company_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postAttachments'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postAttachments'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postAttachments'
            );
        }

        $resourcePath = '/companies({company_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAttachmentsForJournalLine
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function postAttachmentsForJournalLine($company_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postAttachmentsForJournalLineWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAttachmentsForJournalLineWithHttpInfo($company_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        $request = $this->postAttachmentsForJournalLineRequest($company_id, $journal_line_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAttachmentsForJournalLineAsync
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsForJournalLineAsync($company_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        return $this->postAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAttachmentsForJournalLineAsyncWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsForJournalLineAsyncWithHttpInfo($company_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->postAttachmentsForJournalLineRequest($company_id, $journal_line_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAttachmentsForJournalLine'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAttachmentsForJournalLineRequest($company_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling postAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postAttachmentsForJournalLine'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postAttachmentsForJournalLine'
            );
        }

        $resourcePath = '/companies({company_id})/journalLines({journalLine_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAttachmentsForJournalLineForJournal
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attachments
     */
    public function postAttachmentsForJournalLineForJournal($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        list($response) = $this->postAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type);
        return $response;
    }

    /**
     * Operation postAttachmentsForJournalLineForJournalWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attachments, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAttachmentsForJournalLineForJournalWithHttpInfo($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        $request = $this->postAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Attachments' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attachments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attachments';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attachments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAttachmentsForJournalLineForJournalAsync
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsForJournalLineForJournalAsync($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        return $this->postAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAttachmentsForJournalLineForJournalAsyncWithHttpInfo
     *
     * Creates an object of type attachments in Dynamics 365 Business Central
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAttachmentsForJournalLineForJournalAsyncWithHttpInfo($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        $returnType = '\OpenAPI\Client\Model\Attachments';
        $request = $this->postAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAttachmentsForJournalLineForJournal'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $journal_id (v1.0) id for journal (required)
     * @param  string $journal_line_id (v1.0) id for journalLine (required)
     * @param  string $content_type (v1.0) application/json (required)
     * @param  \OpenAPI\Client\Model\UNKNOWN_BASE_TYPE $unknown_base_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAttachmentsForJournalLineForJournalRequest($company_id, $journal_id, $journal_line_id, $content_type, $unknown_base_type)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling postAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_id' is set
        if ($journal_id === null || (is_array($journal_id) && count($journal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_id when calling postAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'journal_line_id' is set
        if ($journal_line_id === null || (is_array($journal_line_id) && count($journal_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journal_line_id when calling postAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postAttachmentsForJournalLineForJournal'
            );
        }
        // verify the required parameter 'unknown_base_type' is set
        if ($unknown_base_type === null || (is_array($unknown_base_type) && count($unknown_base_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unknown_base_type when calling postAttachmentsForJournalLineForJournal'
            );
        }

        $resourcePath = '/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journal_id' . '}',
                ObjectSerializer::toPathValue($journal_id),
                $resourcePath
            );
        }
        // path params
        if ($journal_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'journalLine_id' . '}',
                ObjectSerializer::toPathValue($journal_line_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($unknown_base_type)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($unknown_base_type));
            } else {
                $httpBody = $unknown_base_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
