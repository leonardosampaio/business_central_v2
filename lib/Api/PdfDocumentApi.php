<?php
/**
 * PdfDocumentApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * (v1.0) Dynamics 365 Business Central
 *
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PdfDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPdfDocument
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PdfDocument
     */
    public function getPdfDocument($company_id, $pdf_document_id, $select = null)
    {
        list($response) = $this->getPdfDocumentWithHttpInfo($company_id, $pdf_document_id, $select);
        return $response;
    }

    /**
     * Operation getPdfDocumentWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PdfDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfDocumentWithHttpInfo($company_id, $pdf_document_id, $select = null)
    {
        $request = $this->getPdfDocumentRequest($company_id, $pdf_document_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PdfDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PdfDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PdfDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PdfDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfDocumentAsync
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentAsync($company_id, $pdf_document_id, $select = null)
    {
        return $this->getPdfDocumentAsyncWithHttpInfo($company_id, $pdf_document_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfDocumentAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentAsyncWithHttpInfo($company_id, $pdf_document_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\PdfDocument';
        $request = $this->getPdfDocumentRequest($company_id, $pdf_document_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfDocument'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPdfDocumentRequest($company_id, $pdf_document_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPdfDocument'
            );
        }
        // verify the required parameter 'pdf_document_id' is set
        if ($pdf_document_id === null || (is_array($pdf_document_id) && count($pdf_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document_id when calling getPdfDocument'
            );
        }

        $resourcePath = '/companies({company_id})/pdfDocument({pdfDocument_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($pdf_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdfDocument_id' . '}',
                ObjectSerializer::toPathValue($pdf_document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdfDocumentForPurchaseInvoice
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PdfDocument
     */
    public function getPdfDocumentForPurchaseInvoice($company_id, $purchase_invoice_id, $pdf_document_id, $select = null)
    {
        list($response) = $this->getPdfDocumentForPurchaseInvoiceWithHttpInfo($company_id, $purchase_invoice_id, $pdf_document_id, $select);
        return $response;
    }

    /**
     * Operation getPdfDocumentForPurchaseInvoiceWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PdfDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfDocumentForPurchaseInvoiceWithHttpInfo($company_id, $purchase_invoice_id, $pdf_document_id, $select = null)
    {
        $request = $this->getPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $pdf_document_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PdfDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PdfDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PdfDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PdfDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfDocumentForPurchaseInvoiceAsync
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForPurchaseInvoiceAsync($company_id, $purchase_invoice_id, $pdf_document_id, $select = null)
    {
        return $this->getPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo($company_id, $purchase_invoice_id, $pdf_document_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo($company_id, $purchase_invoice_id, $pdf_document_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\PdfDocument';
        $request = $this->getPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $pdf_document_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfDocumentForPurchaseInvoice'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $pdf_document_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPdfDocumentForPurchaseInvoice'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling getPdfDocumentForPurchaseInvoice'
            );
        }
        // verify the required parameter 'pdf_document_id' is set
        if ($pdf_document_id === null || (is_array($pdf_document_id) && count($pdf_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document_id when calling getPdfDocumentForPurchaseInvoice'
            );
        }

        $resourcePath = '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument({pdfDocument_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseInvoice_id' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($pdf_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdfDocument_id' . '}',
                ObjectSerializer::toPathValue($pdf_document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdfDocumentForSalesCreditMemo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PdfDocument
     */
    public function getPdfDocumentForSalesCreditMemo($company_id, $sales_credit_memo_id, $pdf_document_id, $select = null)
    {
        list($response) = $this->getPdfDocumentForSalesCreditMemoWithHttpInfo($company_id, $sales_credit_memo_id, $pdf_document_id, $select);
        return $response;
    }

    /**
     * Operation getPdfDocumentForSalesCreditMemoWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PdfDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfDocumentForSalesCreditMemoWithHttpInfo($company_id, $sales_credit_memo_id, $pdf_document_id, $select = null)
    {
        $request = $this->getPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $pdf_document_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PdfDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PdfDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PdfDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PdfDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfDocumentForSalesCreditMemoAsync
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesCreditMemoAsync($company_id, $sales_credit_memo_id, $pdf_document_id, $select = null)
    {
        return $this->getPdfDocumentForSalesCreditMemoAsyncWithHttpInfo($company_id, $sales_credit_memo_id, $pdf_document_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfDocumentForSalesCreditMemoAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesCreditMemoAsyncWithHttpInfo($company_id, $sales_credit_memo_id, $pdf_document_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\PdfDocument';
        $request = $this->getPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $pdf_document_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfDocumentForSalesCreditMemo'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $pdf_document_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPdfDocumentForSalesCreditMemo'
            );
        }
        // verify the required parameter 'sales_credit_memo_id' is set
        if ($sales_credit_memo_id === null || (is_array($sales_credit_memo_id) && count($sales_credit_memo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_credit_memo_id when calling getPdfDocumentForSalesCreditMemo'
            );
        }
        // verify the required parameter 'pdf_document_id' is set
        if ($pdf_document_id === null || (is_array($pdf_document_id) && count($pdf_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document_id when calling getPdfDocumentForSalesCreditMemo'
            );
        }

        $resourcePath = '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument({pdfDocument_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_credit_memo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesCreditMemo_id' . '}',
                ObjectSerializer::toPathValue($sales_credit_memo_id),
                $resourcePath
            );
        }
        // path params
        if ($pdf_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdfDocument_id' . '}',
                ObjectSerializer::toPathValue($pdf_document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdfDocumentForSalesInvoice
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PdfDocument
     */
    public function getPdfDocumentForSalesInvoice($company_id, $sales_invoice_id, $pdf_document_id, $select = null)
    {
        list($response) = $this->getPdfDocumentForSalesInvoiceWithHttpInfo($company_id, $sales_invoice_id, $pdf_document_id, $select);
        return $response;
    }

    /**
     * Operation getPdfDocumentForSalesInvoiceWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PdfDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfDocumentForSalesInvoiceWithHttpInfo($company_id, $sales_invoice_id, $pdf_document_id, $select = null)
    {
        $request = $this->getPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $pdf_document_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PdfDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PdfDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PdfDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PdfDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfDocumentForSalesInvoiceAsync
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesInvoiceAsync($company_id, $sales_invoice_id, $pdf_document_id, $select = null)
    {
        return $this->getPdfDocumentForSalesInvoiceAsyncWithHttpInfo($company_id, $sales_invoice_id, $pdf_document_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfDocumentForSalesInvoiceAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesInvoiceAsyncWithHttpInfo($company_id, $sales_invoice_id, $pdf_document_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\PdfDocument';
        $request = $this->getPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $pdf_document_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfDocumentForSalesInvoice'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $pdf_document_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPdfDocumentForSalesInvoice'
            );
        }
        // verify the required parameter 'sales_invoice_id' is set
        if ($sales_invoice_id === null || (is_array($sales_invoice_id) && count($sales_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_invoice_id when calling getPdfDocumentForSalesInvoice'
            );
        }
        // verify the required parameter 'pdf_document_id' is set
        if ($pdf_document_id === null || (is_array($pdf_document_id) && count($pdf_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document_id when calling getPdfDocumentForSalesInvoice'
            );
        }

        $resourcePath = '/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesInvoice_id' . '}',
                ObjectSerializer::toPathValue($sales_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($pdf_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdfDocument_id' . '}',
                ObjectSerializer::toPathValue($pdf_document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPdfDocumentForSalesQuote
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PdfDocument
     */
    public function getPdfDocumentForSalesQuote($company_id, $sales_quote_id, $pdf_document_id, $select = null)
    {
        list($response) = $this->getPdfDocumentForSalesQuoteWithHttpInfo($company_id, $sales_quote_id, $pdf_document_id, $select);
        return $response;
    }

    /**
     * Operation getPdfDocumentForSalesQuoteWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PdfDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPdfDocumentForSalesQuoteWithHttpInfo($company_id, $sales_quote_id, $pdf_document_id, $select = null)
    {
        $request = $this->getPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $pdf_document_id, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PdfDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PdfDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PdfDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PdfDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPdfDocumentForSalesQuoteAsync
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesQuoteAsync($company_id, $sales_quote_id, $pdf_document_id, $select = null)
    {
        return $this->getPdfDocumentForSalesQuoteAsyncWithHttpInfo($company_id, $sales_quote_id, $pdf_document_id, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPdfDocumentForSalesQuoteAsyncWithHttpInfo
     *
     * Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPdfDocumentForSalesQuoteAsyncWithHttpInfo($company_id, $sales_quote_id, $pdf_document_id, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\PdfDocument';
        $request = $this->getPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $pdf_document_id, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPdfDocumentForSalesQuote'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  string $pdf_document_id (v1.0) id for pdfDocument (required)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $pdf_document_id, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPdfDocumentForSalesQuote'
            );
        }
        // verify the required parameter 'sales_quote_id' is set
        if ($sales_quote_id === null || (is_array($sales_quote_id) && count($sales_quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_quote_id when calling getPdfDocumentForSalesQuote'
            );
        }
        // verify the required parameter 'pdf_document_id' is set
        if ($pdf_document_id === null || (is_array($pdf_document_id) && count($pdf_document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document_id when calling getPdfDocumentForSalesQuote'
            );
        }

        $resourcePath = '/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument({pdfDocument_id})';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesQuote_id' . '}',
                ObjectSerializer::toPathValue($sales_quote_id),
                $resourcePath
            );
        }
        // path params
        if ($pdf_document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pdfDocument_id' . '}',
                ObjectSerializer::toPathValue($pdf_document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPdfDocument
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20010
     */
    public function listPdfDocument($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listPdfDocumentWithHttpInfo($company_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listPdfDocumentWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPdfDocumentWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listPdfDocumentRequest($company_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPdfDocumentAsync
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentAsync($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listPdfDocumentAsyncWithHttpInfo($company_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPdfDocumentAsyncWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentAsyncWithHttpInfo($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
        $request = $this->listPdfDocumentRequest($company_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPdfDocument'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPdfDocumentRequest($company_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listPdfDocument'
            );
        }

        $resourcePath = '/companies({company_id})/pdfDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPdfDocumentForPurchaseInvoice
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20010
     */
    public function listPdfDocumentForPurchaseInvoice($company_id, $purchase_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listPdfDocumentForPurchaseInvoiceWithHttpInfo($company_id, $purchase_invoice_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listPdfDocumentForPurchaseInvoiceWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPdfDocumentForPurchaseInvoiceWithHttpInfo($company_id, $purchase_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPdfDocumentForPurchaseInvoiceAsync
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForPurchaseInvoiceAsync($company_id, $purchase_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo($company_id, $purchase_invoice_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForPurchaseInvoiceAsyncWithHttpInfo($company_id, $purchase_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
        $request = $this->listPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPdfDocumentForPurchaseInvoice'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $purchase_invoice_id (v1.0) id for purchaseInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPdfDocumentForPurchaseInvoiceRequest($company_id, $purchase_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listPdfDocumentForPurchaseInvoice'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling listPdfDocumentForPurchaseInvoice'
            );
        }

        $resourcePath = '/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseInvoice_id' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPdfDocumentForSalesCreditMemo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20010
     */
    public function listPdfDocumentForSalesCreditMemo($company_id, $sales_credit_memo_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listPdfDocumentForSalesCreditMemoWithHttpInfo($company_id, $sales_credit_memo_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listPdfDocumentForSalesCreditMemoWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPdfDocumentForSalesCreditMemoWithHttpInfo($company_id, $sales_credit_memo_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPdfDocumentForSalesCreditMemoAsync
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesCreditMemoAsync($company_id, $sales_credit_memo_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listPdfDocumentForSalesCreditMemoAsyncWithHttpInfo($company_id, $sales_credit_memo_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPdfDocumentForSalesCreditMemoAsyncWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesCreditMemoAsyncWithHttpInfo($company_id, $sales_credit_memo_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
        $request = $this->listPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPdfDocumentForSalesCreditMemo'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_credit_memo_id (v1.0) id for salesCreditMemo (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPdfDocumentForSalesCreditMemoRequest($company_id, $sales_credit_memo_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listPdfDocumentForSalesCreditMemo'
            );
        }
        // verify the required parameter 'sales_credit_memo_id' is set
        if ($sales_credit_memo_id === null || (is_array($sales_credit_memo_id) && count($sales_credit_memo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_credit_memo_id when calling listPdfDocumentForSalesCreditMemo'
            );
        }

        $resourcePath = '/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_credit_memo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesCreditMemo_id' . '}',
                ObjectSerializer::toPathValue($sales_credit_memo_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPdfDocumentForSalesInvoice
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20010
     */
    public function listPdfDocumentForSalesInvoice($company_id, $sales_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listPdfDocumentForSalesInvoiceWithHttpInfo($company_id, $sales_invoice_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listPdfDocumentForSalesInvoiceWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPdfDocumentForSalesInvoiceWithHttpInfo($company_id, $sales_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPdfDocumentForSalesInvoiceAsync
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesInvoiceAsync($company_id, $sales_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listPdfDocumentForSalesInvoiceAsyncWithHttpInfo($company_id, $sales_invoice_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPdfDocumentForSalesInvoiceAsyncWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesInvoiceAsyncWithHttpInfo($company_id, $sales_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
        $request = $this->listPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPdfDocumentForSalesInvoice'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_invoice_id (v1.0) id for salesInvoice (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPdfDocumentForSalesInvoiceRequest($company_id, $sales_invoice_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listPdfDocumentForSalesInvoice'
            );
        }
        // verify the required parameter 'sales_invoice_id' is set
        if ($sales_invoice_id === null || (is_array($sales_invoice_id) && count($sales_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_invoice_id when calling listPdfDocumentForSalesInvoice'
            );
        }

        $resourcePath = '/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesInvoice_id' . '}',
                ObjectSerializer::toPathValue($sales_invoice_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPdfDocumentForSalesQuote
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20010
     */
    public function listPdfDocumentForSalesQuote($company_id, $sales_quote_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        list($response) = $this->listPdfDocumentForSalesQuoteWithHttpInfo($company_id, $sales_quote_id, $top, $skip, $limit, $filter, $select);
        return $response;
    }

    /**
     * Operation listPdfDocumentForSalesQuoteWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPdfDocumentForSalesQuoteWithHttpInfo($company_id, $sales_quote_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $request = $this->listPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $top, $skip, $limit, $filter, $select);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20010' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20010', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPdfDocumentForSalesQuoteAsync
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesQuoteAsync($company_id, $sales_quote_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        return $this->listPdfDocumentForSalesQuoteAsyncWithHttpInfo($company_id, $sales_quote_id, $top, $skip, $limit, $filter, $select)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPdfDocumentForSalesQuoteAsyncWithHttpInfo
     *
     * Returns a list of pdfDocument
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPdfDocumentForSalesQuoteAsyncWithHttpInfo($company_id, $sales_quote_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20010';
        $request = $this->listPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $top, $skip, $limit, $filter, $select);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPdfDocumentForSalesQuote'
     *
     * @param  string $company_id (v1.0) id for company (required)
     * @param  string $sales_quote_id (v1.0) id for salesQuote (required)
     * @param  int $top (v1.0) Number of items to return from the top of the list (optional)
     * @param  int $skip (v1.0) Number of items to skip from the list (optional)
     * @param  int $limit (v1.0) Number of items to return from the list (optional)
     * @param  string $filter (v1.0) Filtering expression (optional)
     * @param  string[] $select (v1.0) Selected properties to be retrieved (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPdfDocumentForSalesQuoteRequest($company_id, $sales_quote_id, $top = null, $skip = null, $limit = null, $filter = null, $select = null)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling listPdfDocumentForSalesQuote'
            );
        }
        // verify the required parameter 'sales_quote_id' is set
        if ($sales_quote_id === null || (is_array($sales_quote_id) && count($sales_quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_quote_id when calling listPdfDocumentForSalesQuote'
            );
        }

        $resourcePath = '/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$top'] = $top;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$skip'] = $skip;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$limit'] = $limit;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['$filter'] = $filter;
            }
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, 'form', true);
        }
        if ($select !== null) {
            $queryParams['$select'] = $select;
        }


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($sales_quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesQuote_id' . '}',
                ObjectSerializer::toPathValue($sales_quote_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
